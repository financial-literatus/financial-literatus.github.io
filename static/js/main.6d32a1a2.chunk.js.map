{"version":3,"sources":["types/actions.ts","assets/icons/manual-edited.svg","assets/ResizerOptions.js","actions/educationActions.ts","assets/icons/assistant.svg","reducers/simulationReducer.ts","reducers/showcaseReducer.ts","reducers/educationReducer.ts","reducers/mainReducer.ts","reducers/index.ts","assets/icons/checklist.svg","components/Articles.tsx","components/RealisticConfetti.jsx","components/RealisticFinalConfetti.jsx","components/Article.tsx","assets/icons/article.svg","components/ArticleUnloaded.tsx","pages/Education.tsx","actions/showcaseActions.ts","components/jobGraphsComponents/MajorsGraph.tsx","components/jobGraphsComponents/SkillsGraph.tsx","components/Job.tsx","assets/icons/job.svg","components/JobUnloaded.tsx","pages/Showcase.tsx","components/simComponents/SimReport.tsx","actions/simulationActions.ts","components/formSubComponents/regex.ts","assets/icons/medical.svg","constants/FormOptions.ts","components/formSubComponents/health.tsx","constants/SimHelperContent.ts","constants/Tooltips.ts","assets/icons/finding.svg","components/formSubComponents/housing.tsx","assets/icons/categories.svg","components/formSubComponents/miscellaneous.tsx","assets/icons/search-job.svg","components/formSubComponents/occupation.tsx","assets/icons/transportation.svg","components/formSubComponents/transportation.tsx","components/simComponents/SimForm.tsx","components/simComponents/SimHelper.tsx","pages/Simulation.tsx","actions/mainActions.ts","pages/Settings.tsx","assets/icons/knowledge.svg","assets/icons/labs-text-color.svg","pages/Welcome.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["SimulationActionsTypesEnum","resizerOptions","css","width","background","hoverCss","grabberSize","selectArticle","_payload","type","payload","updateCompletedArticles","InitFieldState","undefined","InitHelperState","description","message","img","AssistantLogo","INITIAL_STATE","job","JSON","parse","localStorage","getItem","stringify","housing","transportation","health","mischellaneous","InitialNivoPieChartDataArray","id","value","color","helperContent","initialState","filter_wage","label","average_wage","job_code","majors_array","name","children","skills_array","job_visibility","_articlesCompleted","_articlesMarked","filter","article","length","ArticleList","_articlesButtonsText","map","i","article_selected","articles_completed","articles_marked","articles_buttons_text","settings_open","welcome_page_open","rootReducer","combineReducers","main","state","action","showcase","simulation","SimulationAction","UPDATE_JOB","UPDATE_HOUSING","UPDATE_TRANSPORTATION","UPDATE_HEALTH","UPDATE_MISCHELLANEOUS","LOAD_INITIAL_PIE_CHART","UPDATE_PIE_CHART","NewNivoPieChartDataArray","UPDATE_CONTENT","SAVE","setItem","CLEAR","clear","LOAD_FROM_LOCAL_STORAGE","education","useTypedSelector","useSelector","Article","_props","dispatch","useDispatch","completedArticles","selectedArticle","str","content","parseInt","currentCompleted","completed","className","onClick","style","border","visibility","src","CompletedLogo","alt","imageHolder","initialSchema","createSchema","nodes","render","coordinates","links","input","output","UncontrolledDiagram","useSchema","schema","onChange","height","canvasStyles","position","pointerEvents","top","left","RealisticConfetti","props","makeShot","particleRatio","opts","animationInstance","origin","y","particleCount","Math","floor","fire","spread","startVelocity","decay","scalar","handlerFire","getInstance","instance","zIndex","refConfetti","this","React","Component","RealisticFinalConfetti","angle","originX","x","colors","nextTickAnimation","isAnimationEnabled","requestAnimationFrame","startAnimation","pauseAnimation","stopAnimation","reset","handlerClickStart","handlerClickPause","handlerClickStop","bind","articlesButtonsText","markedArticles","Confetti","useRef","FinalConfetti","cite","url","text","author","source","href","target","allMarkedExceptOne","tempArray","current","setTimeout","success","ref","ArticleUnloaded","ArticleLogo","Education","split","initialSizes","strokeColor","percent","status","format","toFixed","mode","theme","selectedKeys","toString","Item","EducationLeftDown","updateDescription","updateMajorsGraph","updateSkillsGraph","MajorsGraph","MajorsArray","code","useEffect","set","a","array","axios","get","then","response","console","log","data","year","firstRun","result","el","push","sort","el1","el2","sortByNumber","slice","loadBubbleGraph","margin","right","bottom","scheme","colorBy","childColor","from","modifiers","padding","leavesOnly","enableLabels","borderWidth","labelTextColor","borderColor","animate","SkillsGraph","SkillsArray","keys","indexBy","layout","valueScale","indexScale","round","defs","size","stagger","rotation","lineWidth","spacing","axisTop","axisRight","labelSkipWidth","labelSkipHeight","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","Job","require","cheerio","getUrlByName","fetchURL","$","newDescription","html","replaceAll","toLowerCase","load","updateJobDescription","displayType","thousandSeparator","prefix","ReactHtmlParser","JobUnloaded","JobLogo","Showcase","JobList","jobVisibility","useState","filterLabel","setFilterLabel","filterWage","setFilterWage","stringToNumber","parseFloat","orientation","autoComplete","placeholder","event","min","max","includes","filterByUserInput","job1","job2","sortByWage","updateWage","updateCode","updateJobVisibility","updateJobDetails","tabIndex","project","SimReport","pieChart","Array","jobDesc","housingDesc","transportationDesc","healthDesc","job_earning","find","inputValue","findSelectedJobWage","JobsList","housingExp","transportationExp","healthExp","totalMiscExpense","isEmpty","_input","total","temp","forEach","item","reduce","first","second","calculateTotalMiscExpense","remainingIncome","income","expenses","next","calculateBalance","addToChart","totalExpense","valueFormat","innerRadius","padAngle","cornerRadius","datum","activeOuterRadiusOffset","enableArcLinkLabels","plain","placement","title","QuestionCircleOutlined","tempValue","checkExpense","findPotentialSavingAreas","updateHelperContent","inputNumberFormat","RegExp","inputNumberParser","HousingOptions","TransportationOptions","HealthOptions","Option","Select","index","Health","handleChange","healthContent","MedicalIcon","HealthHelperList","labels","obj","items","optionState","setOptionState","onNameChange","addItem","tooltip","dropdownRender","menu","display","flexWrap","flex","cursor","PlusCircleOutlined","noStyle","shouldUpdate","getFieldValue","formatter","replace","parser","Housing","housingContent","FindingHouse","HousingHelperList","isFieldTouched","Mischellaneous","miscContent","Categories","MiscHelperList","List","fields","add","remove","key","fieldKey","restField","marginBottom","align","rules","required","MinusCircleOutlined","icon","PlusOutlined","Occupation","filteredList","occupationContent","SearchJob","OccupationHelperList","allowClear","options","filterOption","option","toUpperCase","indexOf","findIndex","Transportation","transportationContent","TransportationIcon","CommuteHelperList","validateMessages","types","number","range","SimulationForm","Form","useForm","form","selectedJob","selectedHouseOption","selectedCommuteOption","selectedHealthOption","selectedMisc","setFieldsValue","onClear","resetFields","handleValuesChange","values","updateHousing","updateTransportation","updateHealth","updateMischellaneous","onValuesChange","_","allValues","onFinish","error","onFinishFailed","errorInfo","float","htmlType","SaveOutlined","shape","danger","ClearOutlined","SimulationHelper","flaticon","wrap","Link","rel","Simulation","toggleSettingsVisibility","toggleWelcomeVisibility","Settings","settingsVisibility","updateReducers","headers","authorization","info","file","reader","FileReader","readAsText","fileList","originFileObj","onload","evt","Object","k","onerror","progress","strokeWidth","closable","onClose","visible","blob","Blob","saveAs","ExportOutlined","maxCount","UploadOutlined","FireOutlined","Welcome","welcomeVisibility","handleOk","centered","okButtonProps","ghost","onCancel","footer","Logo","Labs","App","defaultSelectedKeys","to","SettingOutlined","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d32a1a2.chunk.js","sourcesContent":["/**\r\n * Actions types\r\n */\r\n\r\nexport enum SimulationActionsTypesEnum {\r\n    UPDATE_JOB,\r\n    UPDATE_HOUSING,\r\n    UPDATE_TRANSPORTATION,\r\n    UPDATE_HEALTH,\r\n    UPDATE_MISCHELLANEOUS,\r\n    LOAD_INITIAL_PIE_CHART,\r\n    UPDATE_PIE_CHART,\r\n    UPDATE_CONTENT,\r\n    SAVE,\r\n    RESET,\r\n    LOAD_FROM_LOCAL_STORAGE,\r\n    CLEAR\r\n}\r\n","export default __webpack_public_path__ + \"static/media/manual-edited.5df16eea.svg\";","//Resizer Options\r\nexport const resizerOptions = {\r\n  css: {\r\n    width: \"0px\",\r\n    background: \"#f0f0f0\",\r\n  },\r\n  hoverCss: {\r\n    width: \"0px\",\r\n    background: \"#f0f0f0\",\r\n  },\r\n  grabberSize: \"1rem\",\r\n};\r\n\r\n//Resizer Options\r\nexport const resizerOptionsHorizontal = {\r\n  css: {\r\n    height: \"1px\",\r\n    background: \"#f0f0f0\",\r\n  },\r\n  hoverCss: {\r\n    height: \"1px\",\r\n    background: \"#f0f0f0\",\r\n  },\r\n  grabberSize: \"1rem\",\r\n};\r\n","// ********************** ACTIONS FOR EDUCATON ********************** //\r\nexport type EducationAction =\r\n  | { type: \"UPDATE_SELECTED_ARTICLE\"; payload: number }\r\n  |{type: \"UPDATE_COMPLETED_ARTICLES\"; payload: boolean[]}\r\n  |{type: \"LOAD_FROM_LOCAL_STORAGE\"}\r\n\r\nexport const selectArticle = (_payload: number): EducationAction => ({\r\n  type: \"UPDATE_SELECTED_ARTICLE\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateCompletedArticles = (_payload: boolean[]): EducationAction => ({\r\n  type: \"UPDATE_COMPLETED_ARTICLES\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const loadFromLocalStorageEducation = (): EducationAction => ({\r\n  type: \"LOAD_FROM_LOCAL_STORAGE\",\r\n});\r\n\r\n// ****************************************************************** //\r\n","export default __webpack_public_path__ + \"static/media/assistant.bad66745.svg\";","import { Action } from \"../actions/simulationActions\";\r\nimport {SimulationActionsTypesEnum  as SimulationAction} from \"../types/actions\";\r\nimport {ISimulationState, IPieChartData} from \"../types/simulationType\";\r\nimport AssistantLogo from \"../assets/icons/assistant.svg\"\r\nimport { IFormField } from \"../types/simulationtype\";\r\n\r\nconst InitFieldState:IFormField = {\r\n    \"inputValue\": 0,\r\n    \"description\": undefined,\r\n} \r\n\r\nconst InitHelperState = {\r\n    description: {\r\n        message: \"More information about each section of the form will appear here.\",\r\n        img: AssistantLogo\r\n    }\r\n}\r\n\r\n// get data from local storage for each category\r\nconst _job: ISimulationState[\"job\"] = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Occupation\"];\r\nconst _housing: ISimulationState[\"housing\"] = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Housing\"];\r\nconst _commute: ISimulationState[\"transportation\"] = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Transportation\"];\r\nconst _health: ISimulationState[\"health\"] = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Health\"];\r\nconst _misc: ISimulationState[\"mischellaneous\"] = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Mischellaneous\"];\r\n\r\n// initialize data for pie chart\r\n const InitialNivoPieChartData: IPieChartData = {\r\n    id: \"No data selected\",\r\n    value: 1,\r\n    color: \"#c4e5f9\"\r\n}\r\n\r\nconst INITIAL_STATE: ISimulationState = {\r\n    job: _job,\r\n    housing: _housing,\r\n    transportation: _commute,\r\n    health: _health,\r\n    mischellaneous: _misc,\r\n\r\n    InitialNivoPieChartDataArray: [\r\n        InitialNivoPieChartData\r\n    ],\r\n    // NewNivoPieChartDataArray: new Array<IPieChartData>(),\r\n    helperContent: InitHelperState\r\n}\r\n\r\n/**\r\n * This reducer stores and updates simulation state\r\n * \r\n * @param state ISimulationState (current)\r\n * @param action Action\r\n * @returns ISimulationState (new)\r\n */\r\nexport const simulationReducer = (state: ISimulationState = INITIAL_STATE, action: Action): ISimulationState => {\r\n    switch (action.type) {\r\n\r\n        case SimulationAction.UPDATE_JOB:\r\n            state.job = action.payload;\r\n            return state;\r\n\r\n        case SimulationAction.UPDATE_HOUSING:\r\n            state.housing = action.payload;\r\n            return state;\r\n\r\n        case SimulationAction.UPDATE_TRANSPORTATION:\r\n            state.transportation = action.payload;           \r\n            return state;\r\n\r\n        case SimulationAction.UPDATE_HEALTH:\r\n            state.health = action.payload;\r\n            return state;\r\n    \r\n        case SimulationAction.UPDATE_MISCHELLANEOUS:\r\n            state.mischellaneous = action.payload;\r\n            return state;\r\n\r\n        case SimulationAction.LOAD_INITIAL_PIE_CHART:\r\n            return state;\r\n\r\n        case SimulationAction.UPDATE_PIE_CHART:\r\n            state.NewNivoPieChartDataArray= action.payload;\r\n            return state;\r\n        \r\n        case SimulationAction.UPDATE_CONTENT:\r\n            state.helperContent = action.payload;\r\n            return state;\r\n\r\n        case SimulationAction.SAVE:\r\n            localStorage.setItem(\"simulation data\", JSON.stringify(action.payload));\r\n            return state;\r\n        \r\n        case SimulationAction.CLEAR:\r\n            localStorage.clear();\r\n            state.job = InitFieldState;\r\n            state.housing= InitFieldState;  \r\n            state.transportation= InitFieldState;\r\n            state.health= InitFieldState;\r\n            state.mischellaneous = [];\r\n            state.helperContent = InitHelperState;\r\n            return state;\r\n\r\n        case SimulationAction.LOAD_FROM_LOCAL_STORAGE:\r\n            state.job = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Occupation\"];            \r\n            state.housing = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Housing\"];\r\n            state.transportation = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Transportation\"];\r\n            state.health = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Health\"];\r\n            state.mischellaneous = JSON.parse(localStorage.getItem(\"simulation data\") || JSON.stringify(\"{}\"))[\"Mischellaneous\"];\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import { ShowcaseAction } from \"../actions/showcaseActions\";\r\nimport { MajorsGraphArray } from \"../types/majorsGraphArray\";\r\nimport { GraphItemElement } from \"../types/graphItemElement\";\r\n\r\nexport interface ShowcaseState {\r\n  filter_wage: number;\r\n  label: string;\r\n  average_wage: number;\r\n  job_code: string;\r\n  description: string;\r\n  majors_array: MajorsGraphArray,\r\n  skills_array: any, //Using correct type doesn't work with graph\r\n  job_visibility: string\r\n}\r\n\r\nconst initialState = {\r\n    filter_wage: 0,\r\n    label: \"-\",\r\n    average_wage: 0,\r\n    job_code: \"0\",\r\n    description: \"<h1>Loading...</h1>\",\r\n    majors_array: {\r\n        name: \"root\",\r\n        children: [\r\n            {\r\n                name: \"No data provided\",\r\n                value: 404,\r\n            },\r\n        ]\r\n    },\r\n    skills_array: [\r\n        { \r\n            name: \"No data provided\",  \r\n            value: 404\r\n        }\r\n    ],\r\n    job_visibility: \"unloaded\"\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const showcaseReducer = ( state: ShowcaseState = initialState, action: ShowcaseAction ) => {\r\n    switch (action.type) {\r\n        case \"FILTER_WAGE\":\r\n            state.filter_wage = action.payload;\r\n            return state;\r\n\r\n        case \"UPDATE_LABEL\":\r\n            state.label = action.payload;\r\n            return state;\r\n\r\n        case \"UPDATE_WAGE\":\r\n            state.average_wage = action.payload;\r\n            return state;\r\n\r\n        case \"UPDATE_DESCRIPTION\":\r\n            state.description = action.payload;\r\n            return state;\r\n\r\n        case \"UPDATE_CODE\":\r\n            state.job_code = action.payload;\r\n            return state;\r\n\r\n        case \"UPDATE_MAJORS_GRAPH\":\r\n            state.majors_array.children = action.payload;\r\n            return state;\r\n\r\n        case \"UPDATE_SKILLS_GRAPH\":\r\n            state.skills_array = action.payload;\r\n            return state;\r\n\r\n        case \"UPDATE_JOB_VISIBILITY\":\r\n            state.job_visibility = action.payload;\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { EducationAction } from \"../actions/educationActions\";\r\nimport ArticleList from \"../assets/ArticleList.json\"\r\n\r\nexport interface EducationState {\r\n  article_selected: number;\r\n  articles_completed: boolean[];\r\n  articles_marked: number;\r\n  articles_buttons_text: string[]\r\n}\r\n\r\nconst _articlesCompletedInit = \r\n\"[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\"\r\nconst _articlesCompleted: boolean[] = JSON.parse(localStorage.getItem(\"articles_completed\")|| _articlesCompletedInit)\r\nconst _articlesMarked: number = _articlesCompleted.filter(article => article === true).length/(ArticleList.length-1) * 100\r\nconst _articlesButtonsText: string[] = \r\n[\"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\", \"Mark\"]\r\n\r\n_articlesCompleted.map((article, i) => {\r\n    if (i !== 0){\r\n        if (article === true)\r\n            _articlesButtonsText[i-1] = \"Unmark\"\r\n        if (article === false)\r\n            _articlesButtonsText[i-1] = \"Mark\"\r\n    }\r\n})\r\n\r\nconst initialState = {\r\n    article_selected: 0,\r\n    articles_completed: _articlesCompleted,\r\n    articles_marked: _articlesMarked,\r\n    articles_buttons_text: _articlesButtonsText\r\n};\r\n\r\nexport const educationReducer = ( state: EducationState = initialState, action: EducationAction ) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SELECTED_ARTICLE\":\r\n            state.article_selected = action.payload;\r\n            return state;\r\n\r\n        case \"UPDATE_COMPLETED_ARTICLES\":\r\n            state.articles_completed = action.payload;\r\n            localStorage.setItem(\"articles_completed\", JSON.stringify(state.articles_completed));\r\n            state.articles_marked = state.articles_completed.filter(article => article === true).length/(ArticleList.length-1) * 100\r\n            state.articles_completed.map((article, i) => {\r\n                if (i !== 0){\r\n                    if (article === true)\r\n                        state.articles_buttons_text[i-1] = \"Unmark\"\r\n                    if (article === false)\r\n                        state.articles_buttons_text[i-1] = \"Mark\"\r\n                }\r\n            })\r\n            return state;\r\n        \r\n        case \"LOAD_FROM_LOCAL_STORAGE\":\r\n            state.articles_completed =  JSON.parse(localStorage.getItem(\"articles_completed\") || \"[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\")\r\n            localStorage.setItem(\"articles_completed\", JSON.stringify(state.articles_completed));\r\n            state.articles_marked = state.articles_completed.filter(article => article === true).length/(ArticleList.length-1) * 100\r\n            state.articles_completed.map((article, i) => {\r\n                if (i !== 0){\r\n                    if (article === true)\r\n                        state.articles_buttons_text[i-1] = \"Unmark\"\r\n                    if (article === false)\r\n                        state.articles_buttons_text[i-1] = \"Mark\"\r\n                }\r\n            })\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import { MainActions } from \"../actions/mainActions\";\r\n\r\nexport interface MainState {\r\n  settings_open: boolean;\r\n  welcome_page_open: boolean;\r\n}\r\n\r\nconst initialState = {\r\n    settings_open: false,\r\n    welcome_page_open: true,\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const mainReducer = ( state: MainState = initialState, action: MainActions ) => {\r\n    switch (action.type) {\r\n        case \"TOGGLE_SETTINGS\":\r\n            state.settings_open = action.payload;\r\n            return state;\r\n\r\n        case \"TOGGLE_WELCOME\":\r\n            state.welcome_page_open = action.payload;\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { combineReducers } from \"redux\";\r\n//import { jobReducer } from \"./showcaseReducer\";\r\nimport { simulationReducer } from \"./simulationReducer\";\r\nimport { showcaseReducer } from \"./showcaseReducer\";\r\nimport { educationReducer } from \"./educationReducer\";\r\nimport { mainReducer } from \"./mainReducer\";\r\n\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n  main: mainReducer,\r\n  showcase: showcaseReducer,\r\n  simulation: simulationReducer,\r\n  education: educationReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport default rootReducer;\r\n","export default __webpack_public_path__ + \"static/media/checklist.43193c5d.svg\";","import Diagram, { createSchema, useSchema } from \"beautiful-react-diagrams\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { selectArticle } from \"../actions/educationActions\";\r\nimport { useTypedSelector } from \"../reducers\";\r\nimport ArticleList from \"../assets/ArticleList.json\";\r\n\r\nimport CompletedLogo from \"../assets/icons/checklist.svg\"\r\n\r\n// Custome Node\r\nfunction Article ( _props:{ content?: React.ReactNode } ): JSX.Element {\r\n    const dispatch = useDispatch()\r\n\r\n    const completedArticles = useTypedSelector((state) => state.education.articles_completed)\r\n    const selectedArticle = useTypedSelector((state) => state.education.article_selected)\r\n\r\n    const str: string = _props.content as unknown as string\r\n    const id = parseInt(str)\r\n\r\n    const currentCompleted = useTypedSelector((state) => state.education.articles_completed[id])\r\n\r\n    const completed = completedArticles[id]\r\n\r\n    function imageHolder(){\r\n      switch(currentCompleted) {\r\n        case true:  return( \r\n        <img\r\n          style={{visibility: \"visible\" }}\r\n            className=\"Completed-logo\"\r\n            src={CompletedLogo}\r\n            alt=\"Completed logo\"\r\n         ></img>   )\r\n  \r\n        default:  return (\r\n        <img\r\n          style={{visibility: \"visible\" }}\r\n          className=\"UNCompleted-logo\"\r\n          src={CompletedLogo}\r\n          alt=\"Uncompleted logo\"\r\n       ></img>)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"CustomNode\" onClick={() => {dispatch(selectArticle(id))}} style={\r\n        {border: (!completed) ? \r\n            ((selectedArticle === id) ? \"2px solid #198efb\" : \"1px solid black\") :\r\n            ((selectedArticle === id) ? \"2px solid #198efb\" : \"2px solid #6cc186\")}}>\r\n        <h4 className=\"Node-text\">{ArticleList[id].label} </h4> \r\n          <div>{imageHolder()}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const initialSchema = createSchema({\r\n    nodes: [\r\n      { id: \"fin_lit_1\", content: \"1\", render: Article, coordinates: [50, 50],},\r\n      { id: \"budgeting_2\", content: \"2\", render: Article, coordinates: [300, 50] },\r\n      { id: \"howtosave_3\", content: \"3\", render: Article, coordinates: [500, 50] },\r\n      { id: \"bud_apps_4\", content: \"4\", render: Article, coordinates: [350, 150] },\r\n      { id: \"save_vs_invest_5\", content: \"5\", render: Article, coordinates: [750, 50] },\r\n      { id: \"invest_6\", content: \"6\", render: Article, coordinates: [775, 200] },\r\n      { id: \"stocks_7\", content: \"7\", render: Article, coordinates: [925, 310] },\r\n      { id: \"real_estate_8\", content: \"8\", render: Article, coordinates: [650, 310] },\r\n      { id: \"risk_9\", content: \"9\", render: Article, coordinates: [798, 400] },\r\n      { id: \"diversification_10\", content: \"10\", render: Article, coordinates: [767, 550] },\r\n      { id: \"pesonal_finance_11\", content: \"11\", render: Article, coordinates: [25, 200] },\r\n      { id: \"credit_score_12\", content: \"12\", render: Article, coordinates: [70, 360] },\r\n      { id: \"retirement_13\", content: \"13\", render: Article, coordinates: [330, 360] },\r\n      { id: \"IRA_14\", content: \"14\", render: Article, coordinates: [100, 550] },\r\n      { id: \"401k_15\", content: \"15\", render: Article, coordinates: [530, 550] },\r\n\r\n    ],\r\n    links: [\r\n      { input: \"fin_lit_1\", output: \"budgeting_2\" },\r\n      { input: \"budgeting_2\", output: \"howtosave_3\" },\r\n      { input: \"howtosave_3\", output: \"bud_apps_4\" },\r\n      { input: \"howtosave_3\", output: \"save_vs_invest_5\" },\r\n      { input: \"save_vs_invest_5\", output: \"invest_6\" },\r\n      { input: \"invest_6\", output: \"stocks_7\" },\r\n      { input: \"invest_6\", output: \"real_estate_8\" },\r\n      { input: \"invest_6\", output: \"risk_9\" },\r\n      { input: \"risk_9\", output: \"diversification_10\" },\r\n      { input: \"fin_lit_1\", output: \"pesonal_finance_11\" },\r\n      { input: \"pesonal_finance_11\", output: \"credit_score_12\" },\r\n      { input: \"pesonal_finance_11\", output: \"retirement_13\" },\r\n      { input: \"retirement_13\", output: \"IRA_14\" },\r\n      { input: \"retirement_13\", output: \"401k_15\" },\r\n    ],\r\n  });\r\n  \r\nexport function UncontrolledDiagram(): JSX.Element {\r\n    // create diagrams schema\r\n    const [schema, { onChange }] = useSchema(initialSchema);\r\n    return (\r\n      <div className=\"Diagram\" style={{ height: \"110vh\", width:\"10wh\"}}>\r\n        <Diagram schema={schema} onChange={onChange}/>\r\n      </div>\r\n    );\r\n  }","import React from \"react\";\r\nimport ReactCanvasConfetti from \"react-canvas-confetti\";\r\n\r\nconst canvasStyles = {\r\n  position: \"fixed\",\r\n  pointerEvents: \"none\",\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  top: 0,\r\n  left: 0,\r\n}\r\n\r\nexport class RealisticConfetti extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.animationInstance = null;\r\n  }\r\n\r\n  makeShot = (particleRatio, opts) => {\r\n    this.animationInstance && this.animationInstance({\r\n      ...opts,\r\n      origin: { y: 0.7 },\r\n      particleCount: Math.floor(200 * particleRatio),\r\n    });\r\n  }\r\n\r\n  fire =  () => {\r\n    this.makeShot(0.25, {\r\n      spread: 26,\r\n      startVelocity: 55,\r\n    });\r\n\r\n    this.makeShot(0.2, {\r\n      spread: 60,\r\n    });\r\n\r\n    this.makeShot(0.35, {\r\n      spread: 100,\r\n      decay: 0.91,\r\n      scalar: 0.8,\r\n    });\r\n\r\n    this.makeShot(0.1, {\r\n      spread: 120,\r\n      startVelocity: 25,\r\n      decay: 0.92,\r\n      scalar: 1.2,\r\n    });\r\n\r\n    this.makeShot(0.1, {\r\n      spread: 120,\r\n      startVelocity: 45,\r\n    });\r\n  }\r\n\r\n  handlerFire = () => {\r\n    this.fire();\r\n  };\r\n\r\n  getInstance = (instance) => {\r\n    this.animationInstance = instance;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <ReactCanvasConfetti className=\"Fireworks\" zIndex=\"1\" refConfetti={this.getInstance} style={canvasStyles}/>\r\n    );\r\n  } \r\n} ","import React from \"react\";\r\nimport ReactCanvasConfetti from \"react-canvas-confetti\";\r\n\r\nconst canvasStyles = {\r\n  position: \"fixed\",\r\n  pointerEvents: \"none\",\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  top: 0,\r\n  left: 0\r\n}\r\n\r\nexport class RealisticFinalConfetti extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.isAnimationEnabled = false;\r\n    this.animationInstance = null;\r\n    this.nextTickAnimation = this.nextTickAnimation.bind(this);\r\n  }\r\n\r\n  makeShot = (angle, originX) => {\r\n    this.animationInstance && this.animationInstance({\r\n      particleCount: 3,\r\n      angle,\r\n      spread: 55,\r\n      origin: { x: originX },\r\n      colors: [\"#bb0000\", \"#ffffff\"],\r\n    });\r\n  }\r\n\r\n  nextTickAnimation = () => {\r\n    this.makeShot(60, 0);\r\n    this.makeShot(120, 1);\r\n    if (this.isAnimationEnabled) requestAnimationFrame(this.nextTickAnimation);\r\n  }\r\n\r\n  startAnimation = () => {\r\n    if (!this.isAnimationEnabled) {\r\n      this.isAnimationEnabled = true;\r\n      this.nextTickAnimation();\r\n    }\r\n  }\r\n\r\n  pauseAnimation = () => {\r\n    this.isAnimationEnabled = false;\r\n  }\r\n\r\n  stopAnimation = () => {\r\n    this.isAnimationEnabled = false;\r\n    this.animationInstance && this.animationInstance.reset();\r\n  }\r\n\r\n  handlerClickStart = () => {\r\n    this.startAnimation();\r\n  };\r\n\r\n  handlerClickPause = () => {\r\n    this.pauseAnimation();\r\n  };\r\n\r\n  handlerClickStop = () => {\r\n    this.stopAnimation();\r\n  };\r\n\r\n  getInstance = (instance) => {\r\n    this.animationInstance = instance;\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.isAnimationEnabled = false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>     \r\n        <ReactCanvasConfetti className=\"Fireworks\" refConfetti={this.getInstance} style={canvasStyles}/>\r\n      </>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../reducers\";\r\nimport ArticleList from \"../assets/ArticleList.json\";\r\nimport { RealisticConfetti } from \"./RealisticConfetti\";\r\nimport { RealisticFinalConfetti } from \"./RealisticFinalConfetti\";\r\n\r\nimport { Button, message } from \"antd\";\r\nimport { updateCompletedArticles } from \"../actions/educationActions\";\r\n\r\n\r\n/**\r\n * Article component. The left down part of the education page. \r\n * Includes article's name (label), citation, link, complete button.\r\n * \r\n * @returns a page that represents an article as JSX element.\r\n */\r\nexport function Article(): JSX.Element {\r\n  const dispatch = useDispatch()\r\n\r\n  // A variable to keep track of the selected article\r\n  const selectedArticle = useTypedSelector((state) => state.education.article_selected)\r\n  const completedArticles = useTypedSelector((state) => state.education.articles_completed)\r\n  const articlesButtonsText = useTypedSelector((state) => state.education.articles_buttons_text)\r\n  const markedArticles = useTypedSelector((state) => state.education.articles_marked)\r\n\r\n  \r\n  const Confetti = React.useRef<RealisticConfetti>(null);\r\n  const FinalConfetti = React.useRef<RealisticFinalConfetti>(null);\r\n\r\n  \r\n  function toggleCompleted(){\r\n    const allMarkedExceptOne = (completedArticles.length-2)/(ArticleList.length-1) * 100\r\n    const tempArray: boolean[] = completedArticles;\r\n    if (tempArray[selectedArticle] === false && markedArticles === allMarkedExceptOne) {\r\n      FinalConfetti.current?.handlerClickStart()\r\n      setTimeout(() => FinalConfetti.current?.handlerClickPause(), 2700);\r\n      message.success(\"Education is completed! Congratulations!\");\r\n    }\r\n    else if (tempArray[selectedArticle] === false)\r\n      Confetti.current?.handlerFire()\r\n    tempArray[selectedArticle] = !tempArray[selectedArticle];\r\n    dispatch(updateCompletedArticles(tempArray))\r\n  }\r\n\r\n  \r\n  return (<>\r\n    <h2 className=\"Article-title\">{ArticleList[selectedArticle].label}</h2>\r\n    <blockquote \r\n      className=\"Article-text\" \r\n      cite={ArticleList[selectedArticle].url} >\r\n      <p>{ArticleList[selectedArticle].text}</p>\r\n    </blockquote>\r\n    <figcaption className = \"Article-source\">\r\n     {ArticleList[selectedArticle].author}<cite>\r\n        {ArticleList[selectedArticle].source}\r\n      </cite>\r\n    </figcaption>\r\n    <div className = \"Article-buttons\">\r\n      <Button type=\"link\" href={ArticleList[selectedArticle].url} target=\"_blank\">Read full article</Button>\r\n      <Button type=\"link\" onClick={toggleCompleted}>{articlesButtonsText[selectedArticle-1]} as completed</Button>\r\n    </div>\r\n    <RealisticConfetti ref={Confetti}/>\r\n    <RealisticFinalConfetti ref={FinalConfetti}/>\r\n  </>);\r\n}\r\n","export default __webpack_public_path__ + \"static/media/article.e47a8ae5.svg\";","import ArticleLogo from \"../assets/icons/article.svg\"\r\n\r\n/**\r\n * Unloaded article component.\r\n * Represents the left down part of the education when an article is not loaded.\r\n * \r\n * @returns a page that represents description of the unloaded article as a JSX element.\r\n */\r\nexport function ArticleUnloaded(): JSX.Element {\r\n  return (\r\n    <div className=\"Unloaded-article-container\">\r\n        <h2 className=\"Unloaded-article-text\">Select an article</h2>\r\n        <img\r\n            className=\"Unloaded-article-logo\"\r\n            src={ArticleLogo}\r\n            alt=\"Unloaded article\"\r\n        ></img>\r\n    </div>\r\n  );\r\n}\r\n","\r\n//https://beautifulinteractions.github.io/beautiful-react-diagrams/#/Getting%20started\r\nimport \"beautiful-react-diagrams/styles.css\";\r\n//https://collapse-pane.zurg.dev/#/?id=react-collapse-pane\r\nimport { SplitPane } from \"react-collapse-pane\";\r\nimport { resizerOptions, resizerOptionsHorizontal } from \"../assets/ResizerOptions\";\r\nimport { Menu, Progress } from \"antd\";\r\nimport { UncontrolledDiagram } from \"../components/Articles\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { selectArticle } from \"../actions/educationActions\";\r\nimport { useTypedSelector } from \"../reducers\";\r\nimport ArticleList from \"../assets/ArticleList.json\";\r\nimport { Article } from \"../components/Article\"\r\nimport { ArticleUnloaded } from \"../components/ArticleUnloaded\"\r\n\r\nimport \"../style/Education.css\";\r\n\r\n/**\r\n * Education page component.\r\n * \r\n * @returns the enitre education page as a JSX.Element.\r\n */\r\nexport function Education(): JSX.Element {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  // A variable to keep track of the selected article\r\n  const selectedArticle = useTypedSelector((state) => state.education.article_selected)\r\n  const markedArticles = useTypedSelector((state) => state.education.articles_marked)\r\n  \r\n  function EducationLeftDown(){\r\n    switch(selectedArticle) {\r\n\r\n      case 0:  return <ArticleUnloaded/>\r\n\r\n      default:  return <Article/>\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <SplitPane\r\n          split=\"vertical\"\r\n          initialSizes={[2, 5]}\r\n          resizerOptions={resizerOptions}\r\n        >\r\n          <div className=\"Education-left\">\r\n              <div className=\"Education-progress\">\r\n                <Progress className=\"Education-progress-bar\" \r\n                  strokeColor={{\r\n                      \"0\": \"#108ee9\",\r\n                      \"100\": \"#87d068\",\r\n                    }}\r\n                percent={markedArticles} status=\"active\"\r\n                format={(percent) => {if (percent === 100) { return \"Done!\" } else return percent?.toFixed(2) + \"%\"}}\r\n                />\r\n              </div>\r\n              <div className=\"Education-left-up\">\r\n                <Menu mode=\"inline\" theme=\"light\" className=\"Articles-list\" selectedKeys = {[selectedArticle.toString()]} >\r\n                {ArticleList.map(function (article, i) {\r\n                  if (i !== 0)\r\n                    return <Menu.Item key={i} onClick={() => {dispatch(selectArticle(i))}}>Article {i}: {article.label}</Menu.Item>\r\n                })}                  \r\n                </Menu>\r\n              </div>\r\n              <div className=\"Education-left-down\">\r\n                { EducationLeftDown() }\r\n              </div>  \r\n          </div>\r\n          <div className=\"Education-right\">\r\n            <UncontrolledDiagram/>\r\n          </div>\r\n        </SplitPane>\r\n    </div>\r\n  );\r\n}","import { GraphItemElement } from \"../types/graphItemElement\";\r\n\r\n// ********************** ACTIONS FOR SHOWCASE ********************** //\r\nexport type ShowcaseAction =\r\n  | { type: \"UPDATE_LABEL\"; payload: string }\r\n  | { type: \"UPDATE_WAGE\"; payload: number }\r\n  | { type: \"FILTER_WAGE\"; payload: number }\r\n  | { type: \"UPDATE_DESCRIPTION\"; payload: string }\r\n  | { type: \"UPDATE_CODE\"; payload: string }\r\n  | { type: \"UPDATE_MAJORS_GRAPH\"; payload: Array<GraphItemElement> }\r\n  | { type: \"UPDATE_SKILLS_GRAPH\"; payload: Array<GraphItemElement> }\r\n  | { type: \"UPDATE_JOB_VISIBILITY\"; payload: string }\r\n\r\n\r\n\r\n\r\nexport const filterWage = (_payload: number): ShowcaseAction => ({\r\n  type: \"FILTER_WAGE\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateLabel = (_payload: string): ShowcaseAction => ({\r\n  type: \"UPDATE_LABEL\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateWage = (_payload: number): ShowcaseAction => ({\r\n  type: \"UPDATE_WAGE\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateDescription = (_payload: string): ShowcaseAction => ({\r\n  type: \"UPDATE_DESCRIPTION\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateCode = (_payload: string): ShowcaseAction => ({\r\n  type: \"UPDATE_CODE\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateMajorsGraph = (_payload: Array<GraphItemElement>): ShowcaseAction => ({\r\n  type: \"UPDATE_MAJORS_GRAPH\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateSkillsGraph= (_payload: Array<GraphItemElement>): ShowcaseAction => ({\r\n  type: \"UPDATE_SKILLS_GRAPH\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateJobVisibility= (_payload: string): ShowcaseAction => ({\r\n  type: \"UPDATE_JOB_VISIBILITY\",\r\n  payload: _payload,\r\n});\r\n// ****************************************************************** //\r\n","import axios, { AxiosResponse } from \"axios\"\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { useEffect } from \"react\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateMajorsGraph } from \"../../actions/showcaseActions\";\r\n\r\nimport { ResponsiveCirclePacking } from '@nivo/circle-packing'\r\n\r\nimport { GraphItemElement } from \"../../types/graphItemElement\";\r\n\r\n/**\r\n * Majors graph that represents the most popular majors for specific job.\r\n * Bigger bubble - more popular major.\r\n * \r\n * @returns a bubble graph of majors.\r\n */\r\nexport function MajorsGraph(): JSX.Element {\r\n    const dispatch = useDispatch();\r\n       \r\n    const MajorsArray = useTypedSelector((state) => state.showcase.majors_array)\r\n    const code = useTypedSelector((state) => state.showcase.job_code)\r\n    \r\n    useEffect(()=>{\r\n\r\n        //Link with data needed to built the graph\r\n        const url = `https://ruby.datausa.io/api/data?PUMS Occupation=${code}&drilldowns=CIP2&measures=Total Population,Total Population MOE Appx,yocpop RCA,Record%20Count&Record%20Count>=5&Workforce Status=true&Degree=21`\r\n\r\n        if (code !== \"0\"){\r\n            loadBubbleGraph(url)\r\n        }\r\n\r\n        interface MajorsJSON {\r\n            data:   [\r\n                {\r\n                \"ID Year\":                   number;\r\n                \"Year\":                      string;\r\n                \"ID Workforce Status\":       boolean;\r\n                \"Workforce Status\":          string;\r\n                \"ID Degree\":                 number;\r\n                \"Degree\":                    string;\r\n                \"Total Population\":          number;\r\n                \"Total Population MOE Appx\": number;\r\n                \"yocpop RCA\":                number;\r\n                \"Record Count\":              number;\r\n                \"PUMS Occupation\":           string;\r\n                \"ID PUMS Occupation\":        string;\r\n                \"Slug PUMS Occupation\":      string;\r\n                \"CIP2\":                      string;\r\n                \"ID CIP2\":                   string;\r\n                }\r\n            ];\r\n            source: {\r\n                measures:      string[];\r\n                annotations:   {\r\n                    source_name:        string;\r\n                    source_description: string;\r\n                    dataset_name:       string;\r\n                    dataset_link:       string;\r\n                    subtopic:           string;\r\n                    table_id:           string;\r\n                    topic:              string;\r\n                    hidden_measures:    string;\r\n                };\r\n                name:          string;\r\n                substitutions: unknown[];\r\n            };\r\n        }    \r\n        /**\r\n         * Obtains data for the bubble graph based on the provided link.\r\n         * \r\n         * @param url - link used to send get request and obtain data.\r\n         */\r\n        async function loadBubbleGraph(url: string){\r\n            //Get data by sending a get request\r\n            await axios.get(url).then((response: AxiosResponse<MajorsJSON>) => {\r\n                console.log(response.data.data.length)\r\n                let array: Array<GraphItemElement> = []\r\n                let year = 0;\r\n                let firstRun = true;\r\n                // For each item in the list of recieved data push the data we need to \r\n                // the temporary bubble array\r\n                for(let i = 0; i <= response.data.data.length; i++){\r\n                    const result = response.data.data[i]\r\n                    if (result != null) {\r\n                     \r\n                        if (firstRun === true){\r\n                            year = result[\"ID Year\"]\r\n                            firstRun = false\r\n                        }\r\n                        if (result[\"ID Year\"] === year){\r\n                        const major: string = result[\"CIP2\"];\r\n                        const population: number = result[\"Total Population\"]\r\n                        const el: GraphItemElement = {\r\n                            name: major,\r\n                            value: population,\r\n                        }\r\n                        array.push(el)\r\n                        }\r\n                    } \r\n                }\r\n                // Sort and slice temporary bubble array\r\n                if (array.length !== 0){\r\n                    array = array.sort((el1: GraphItemElement, el2: GraphItemElement) => sortByNumber(el1, el2))\r\n                    array = array.slice(0,10)\r\n                }\r\n                else\r\n                    array.push({ name: \"No data provided\",  value: 404})\r\n            \r\n                // Update the real array\r\n                set(array)\r\n            })\r\n\r\n            /**\r\n             * A function that sets array of GraphItemElements to the graph\r\n             * \r\n             * @param array - array of GraphItemElements\r\n             */\r\n            function set(array: Array<GraphItemElement>){            \r\n                dispatch(updateMajorsGraph(array));\r\n            }\r\n        }\r\n\r\n        function sortByNumber(el1: GraphItemElement, el2: GraphItemElement) {\r\n            return (\r\n            el2.value - el1.value\r\n            );\r\n        }\r\n    })\r\n    return (\r\n        <div>\r\n            <div className=\"Bubble-chart-container\">\r\n            <ResponsiveCirclePacking\r\n                data={MajorsArray}\r\n                margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\r\n                id=\"name\"\r\n                colors={{ scheme: \"spectral\" }}\r\n                colorBy=\"id\"\r\n                childColor={{ from: \"color\", modifiers: [ [ \"brighter\", 0.4 ] ] }}\r\n                padding={1}\r\n                leavesOnly={true}\r\n                enableLabels={true}\r\n                label=\"value\"\r\n                borderWidth={2}\r\n                labelTextColor={{ from: \"color\", modifiers: [ [ \"darker\", 2.4 ] ] }}\r\n                borderColor={{ from: \"color\", modifiers: [ [ \"darker\", 0.3 ] ] }}\r\n                animate={true}\r\n            />\r\n            </div>\r\n            <h2 className=\"Most-common-majors\">Most common majors</h2>\r\n        </div>\r\n        ) \r\n}","import axios, { AxiosResponse } from \"axios\"\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { useEffect } from \"react\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateSkillsGraph } from \"../../actions/showcaseActions\";\r\n\r\nimport { GraphItemElement } from  \"../../types/graphItemElement\"\r\nimport { ResponsiveBar } from \"@nivo/bar\"\r\n \r\n\r\n/**\r\n * Skill graph that represents top 10 skills for the job.\r\n * \r\n * @returns a bar graph with top 10 skills and their values.\r\n */\r\nexport function SkillsGraph (): JSX.Element {\r\n    const dispatch = useDispatch();\r\n       \r\n    const SkillsArray = useTypedSelector((state) => state.showcase.skills_array)\r\n    const code = useTypedSelector((state) => state.showcase.job_code)\r\n\r\n    useEffect(()=>{\r\n\r\n        //Link with data needed to built the graph\r\n        const url = `https://ruby.datausa.io/api/data?measure=LV%20Value,RCA&PUMS%20Occupation=${code}&drilldowns=Skill%20Element&parents=true`\r\n        if (code !== \"0\"){\r\n            loadBubbleGraph(url)\r\n        }\r\n        interface SkillsJSON {\r\n            data:   [\r\n                {\r\n                \"ID Skill Element Group\":    string;\r\n                \"Skill Element Group\":       string;\r\n                \"ID Skill Element\":          string;\r\n                \"Workforce Status\":          string;\r\n                \"Skill Element\":             string;\r\n                \"ID Year\":                   number;\r\n                \"Year\":                      string;\r\n                \"ID Major Occupation Group\": string;\r\n                \"Major Occupation Group\":    string;\r\n                \"ID Minor Occupation Group\": string;\r\n                \"Minor Occupation Group\":    string;\r\n                \"ID Broad Occupation\":       string;\r\n                \"Broad Occupation\":          string;\r\n                \"LV Value\":                  number;\r\n                \"RCA\":                       number;\r\n                \"PUMS Occupation\":           string;\r\n                \"ID PUMS Occupation\":        string;\r\n                \"Slug PUMS Occupation\":      string;\r\n                }\r\n            ];\r\n            source: {\r\n                measures:      string[];\r\n                annotations:   {\r\n                    source_name:        string;\r\n                    source_description: string;\r\n                    dataset_name:       string;\r\n                    dataset_link:       string;\r\n                    subtopic:           string;\r\n                    table_id:           string;\r\n                    topic:              string;\r\n                    hidden_measures:    string;\r\n                };\r\n                name:          string;\r\n                substitutions: unknown[];\r\n            };\r\n        }    \r\n    \r\n        /**\r\n         * Obtains data for the  graph based on the provided link.\r\n         * \r\n         * @param url - link used to send get request and obtain data.\r\n         */\r\n        async function loadBubbleGraph(url: string){\r\n            //Get data by sending a get request\r\n            await axios.get(url).then((response: AxiosResponse<SkillsJSON>) => {\r\n                let array: Array<GraphItemElement> = []\r\n                let year = 0;\r\n                let firstRun = true;\r\n                // For each item in the list of recieved data push the data we need to \r\n                // the temporary bubble array\r\n                for(let i = 0; i <= response.data.data.length; i++){\r\n                    const result = response.data.data[i]\r\n                    if (result != null) {\r\n                     \r\n                        if (firstRun === true){\r\n                            year = result[\"ID Year\"]\r\n                            firstRun = false\r\n                        }\r\n                        if (result[\"ID Year\"] === year){\r\n                        const skill: string = result[\"Skill Element\"];\r\n                        const value: number = result[\"LV Value\"]\r\n                        const el: GraphItemElement = {\r\n                            name: skill,\r\n                            value: value*100\r\n                        }\r\n                        array.push(el)\r\n                        }\r\n                    } \r\n                }\r\n                // Sort and slice temporary array of data elements\r\n                if (array.length !== 0){\r\n                    array = array.sort((el1: GraphItemElement, el2: GraphItemElement) => sortByNumber(el1, el2))\r\n                    array = array.slice(0,10)\r\n                }\r\n                else\r\n                    array.push({ name: \"No data provided\",  value: 404})\r\n            \r\n                // Update the real array\r\n                setTimeout(function(){ set(array) }, 500)\r\n            })\r\n\r\n            /**\r\n             * A function that sets array of GraphItemElements to the graph\r\n             * \r\n             * @param array - array of GraphItemElements\r\n             */\r\n            function set(array: Array<GraphItemElement>){            \r\n                dispatch(updateSkillsGraph(array));\r\n            }\r\n        }\r\n\r\n        function sortByNumber(el1: GraphItemElement, el2: GraphItemElement) {\r\n            return (\r\n            el2.value - el1.value\r\n            );\r\n        }\r\n    })\r\n  \r\n    return (\r\n        <div>\r\n            <div className=\"Skills-chart-container\">\r\n            <ResponsiveBar\r\n                data={SkillsArray}\r\n                keys={[\"value\"]}\r\n                indexBy=\"name\"\r\n                layout=\"horizontal\"\r\n                margin={{ top: 50, right: 200, bottom: 50, left: 135 }}\r\n                padding={0.3}\r\n                valueScale={{ type: \"linear\" }}\r\n                indexScale={{ type: \"band\", round: true }}\r\n                colors={{ scheme: \"nivo\" }}\r\n                defs={[\r\n                    {\r\n                        id: \"dots\",\r\n                        type: \"patternDots\",\r\n                        background: \"inherit\",\r\n                        color: \"#38bcb2\",\r\n                        size: 4,\r\n                        padding: 1,\r\n                        stagger: true\r\n                    },\r\n                    {\r\n                        id: \"lines\",\r\n                        type: \"patternLines\",\r\n                        background: \"inherit\",\r\n                        color: \"#eed312\",\r\n                        rotation: -45,\r\n                        lineWidth: 6,\r\n                        spacing: 10\r\n                    }\r\n                ]}\r\n    \r\n                borderColor={{ from: \"color\", modifiers: [ [ \"darker\", 1.6 ] ] }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                labelSkipWidth={12}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: \"color\", modifiers: [ [ \"darker\", 1.6 ] ] }}\r\n                legends={[\r\n                    {\r\n                        dataFrom: \"keys\",\r\n                        anchor: \"bottom-right\",\r\n                        direction: \"column\",\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: \"left-to-right\",\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: \"hover\",\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n             />\r\n            </div>\r\n            <h2 className=\"Most-common-skills\">Top 10 skills</h2>\r\n        </div>\r\n        ) \r\n}","import React, { useEffect } from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../reducers\";\r\nimport { updateDescription } from \"../actions/showcaseActions\";\r\n\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nimport { MajorsGraph } from \"./jobGraphsComponents/MajorsGraph\";\r\nimport { SkillsGraph } from \"./jobGraphsComponents/SkillsGraph\";\r\n\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n\r\n/**\r\n * Job component. The right part of the showcase page. \r\n * Includes job's name (label), average wage, description and graphs.\r\n * \r\n * @returns a page that represents description of the job as a JSX element.\r\n */\r\nexport function Job(): JSX.Element {\r\n  const dispatch = useDispatch();\r\n\r\n  // Updatable elements\r\n  const label = useTypedSelector((state) => state.showcase.label);\r\n  const average_wage = useTypedSelector((state) => state.showcase.average_wage);\r\n  const description = useTypedSelector((state) => state.showcase.description);\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n  const axios = require(\"axios\");\r\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n  const cheerio = require(\"cheerio\");\r\n\r\n  useEffect(() => {\r\n    updateJobDescription();\r\n\r\n    /**\r\n     * Updates the job description when invoked by new label of the job.\r\n     */\r\n    async function updateJobDescription() {\r\n      // Obtain a new link\r\n      const url = await getUrlByName();\r\n\r\n      // Get data from the link\r\n      const $ = await fetchURL(url);\r\n\r\n      // Get the description part from the data\r\n      let newDescription = $(\".section-description\").html();\r\n      if (newDescription != null)\r\n        newDescription = newDescription.replaceAll(\r\n          // eslint-disable-next-line quotes\r\n          'href=\"/',\r\n          // eslint-disable-next-line quotes\r\n          'href=\"https://datausa.io/'\r\n        );\r\n\r\n      // Set new description\r\n      dispatch(updateDescription(newDescription));\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns URL based on the current job label.\r\n     *\r\n     * @returns URL\r\n     */\r\n    async function getUrlByName() {\r\n      let str = label;\r\n        \r\n      str = str.replaceAll(\" &\", \"\");\r\n      str = str.replaceAll(\",\", \"\");\r\n      str = str.replaceAll(\" (Legacy)\", \"\");\r\n      str = str.replaceAll(\" \", \"-\");\r\n      str = str.replaceAll(\"/\", \"\");\r\n      str = str.toLowerCase();\r\n\r\n      return \"https://datausa.io/profile/soc/\" + str;\r\n    }\r\n\r\n    /**\r\n     * Obtains data from the given URL by sending a simple send request.\r\n     *\r\n     * @param URL\r\n     * @returns Cherrio component with the page received\r\n     */\r\n    async function fetchURL(url: string) {\r\n      const { data } = await axios.get(url);\r\n      return cheerio.load(data);\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <div className=\"ContainerJob\">\r\n      <h1>{label}</h1>\r\n      <h2>Average income (2019): <NumberFormat value={average_wage} displayType={\"text\"} thousandSeparator={true} prefix={\"$\"}/></h2>\r\n      <h1 className=\"Description-title\"> Description</h1>\r\n      <div className=\"FirstRowContainer\">\r\n        <div className=\"Description\">{ReactHtmlParser(description)}</div>\r\n        <div className=\"MajorContainer\">\r\n          <MajorsGraph/>\r\n        </div>\r\n      </div>\r\n      <SkillsGraph/>\r\n        <h5 className=\"Job-data-source\">All data source: <a href=\"https://datausa.io/\" target=\"_blank\">https://datausa.io/</a></h5>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/job.692fe42e.svg\";","import JobLogo from \"../assets/icons/job.svg\"\r\n\r\n\r\n/**\r\n * Unloaded job component.\r\n * Represents the right part of the showcase when the job is not loaded.\r\n * \r\n * @returns a page that represents description of the unloaded job as a JSX element.\r\n */\r\nexport function JobUnloaded(): JSX.Element {\r\n  \r\n  return (\r\n    <div className=\"Unloaded-job-container\">\r\n        <h1 className=\"Unloaded-job-text\">Choose a job at the left panel</h1>\r\n        <img\r\n            className=\"Unloaded-job-logo\"\r\n            src={JobLogo}\r\n            alt=\"Unloaded job\"\r\n          ></img>\r\n    </div>\r\n  );\r\n}\r\n","import { Job } from \"../components/Job\";\r\nimport { JobUnloaded } from \"../components/JobUnloaded\";\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateLabel, updateWage, updateDescription, updateCode, updateJobVisibility } from \"../actions/showcaseActions\";\r\n\r\nimport { SplitPane } from \"react-collapse-pane\";\r\nimport { resizerOptions } from \"../assets/ResizerOptions\";\r\nimport { Menu, Slider, Divider } from \"antd\";\r\n\r\nimport \"../style/Showcase.css\";\r\n\r\nimport JobList from \"../assets/JobList.json\";\r\nimport JobListElement from \"../types/jobListElement\"\r\nimport { useTypedSelector } from \"../reducers\";\r\n\r\n/**\r\n * Showcase page component.\r\n * \r\n * @returns the enitre showcase page as a JSX.Element.\r\n */\r\nexport function Showcase(): JSX.Element {\r\n  const dispatch = useDispatch();\r\n\r\n  // A variable to keep track of job visibility\r\n  const jobVisibility = useTypedSelector((state) => state.showcase.job_visibility)\r\n\r\n  // A variable to keep track of changes in the label filter\r\n  const [filterLabel, setFilterLabel] = useState(\"\");\r\n\r\n  // A variable to keep track of changes in the wage filter\r\n  const [filterWage, setFilterWage] = useState(0);\r\n  /**\r\n   * Filters all jobs from the given list. \r\n   * Each job should be built with JobElement interface\r\n   * \r\n   * @param JobList \r\n   * @returns the filtered list of jobs\r\n   */\r\n  function filterJobs(JobList: Array<JobListElement>) {\r\n    return JobList.filter((job) => filterByUserInput(job))\r\n      .sort((job1: JobListElement, job2: JobListElement) => sortByWage(job1, job2))\r\n      .slice(0, 15)\r\n      .map((job: JobListElement) => (\r\n        <Menu.Item\r\n          className=\"Job-button\"\r\n          onClick={() => updateJobDetails(job)}\r\n          key={job.value}\r\n          tabIndex={0}\r\n        >\r\n          {job.value}\r\n        </Menu.Item>\r\n      ));\r\n  }\r\n\r\n  /**\r\n   * Check if the job fits the name filter.\r\n   * \r\n   * @param job - the job to be checked\r\n   * @returns true if job fits, false if job doesn't fit\r\n   */\r\n  function filterByUserInput(job: JobListElement) {\r\n    if (\r\n      job.value.toLowerCase().includes(filterLabel.toLowerCase()) &&\r\n      parseFloat(job.average_wage) >= filterWage\r\n    )\r\n      return true;\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Check if the job fits the user's preferences based by its average wage.\r\n   * \r\n   * @param job - the job to be checked\r\n   * @returns true if job fits, false if job doesn't fit\r\n   */\r\n  function sortByWage(job1: JobListElement, job2: JobListElement) {\r\n    return (\r\n      stringToNumber(job1.average_wage) - stringToNumber(job2.average_wage)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Converts a number inside a string to the float number rounded by 2 decimals.\r\n   * \r\n   * @param str - string that represents a number\r\n   * @returns  float number rounded by 2 decimals\r\n   */\r\n  function stringToNumber(str: string) {\r\n    return Math.round(parseFloat(str) * 100) / 100;\r\n  }\r\n\r\n  /**\r\n   * Update the detailes of the job based on the given job.\r\n   * Given job should be built based on the JobElement interface.\r\n   * \r\n   * @param job \r\n   */\r\n  function updateJobDetails(job: JobListElement) {\r\n    dispatch(updateLabel(job.value));\r\n    dispatch(updateWage(stringToNumber(job.average_wage)));\r\n    dispatch(updateDescription(\"<h1>Loading...</h1>\"));\r\n    dispatch(updateCode(job.code));\r\n    dispatch(updateJobVisibility(\"loaded\"));\r\n  }\r\n\r\n  function project(){\r\n    switch(jobVisibility) {\r\n\r\n      case \"unloaded\":  return <JobUnloaded/>\r\n      case \"loaded\":  return <Job/>\r\n\r\n      default:  return <h1>NO COMPONENT MATCH</h1>\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Body\">\r\n      <SplitPane\r\n        split=\"vertical\"\r\n        initialSizes={[1, 3]}\r\n        resizerOptions={resizerOptions}\r\n      >\r\n        <div className=\"Showcase-left\">\r\n          <div className=\"Showcase-left-up\">\r\n          <div className=\"LabelContainerFilter\">\r\n            <Divider className=\"Split\" orientation=\"left\">\r\n              Name filter\r\n            </Divider>\r\n            <input\r\n              className=\"LabelInput\"\r\n              type=\"text\"\r\n              autoComplete=\"off\"\r\n              name=\"filter\"\r\n              placeholder=\"Job name...\"\r\n              value={filterLabel}\r\n              onChange={(event) => setFilterLabel(event.target.value)}\r\n            ></input>\r\n          </div>\r\n          <div className=\"WageContainerFilter\">\r\n            <Divider className=\"Split\" orientation=\"left\">\r\n              Wage filter ($)\r\n            </Divider>\r\n            <Slider\r\n              min={0}\r\n              max={200000}\r\n              value={filterWage}\r\n              onChange={(event) => setFilterWage(event)}\r\n            />\r\n          </div>\r\n          </div>\r\n          <Menu mode=\"inline\" theme=\"light\" className=\"Joblist\">\r\n            {filterJobs(JobList)}\r\n          </Menu>\r\n        </div>\r\n        <div className=\"Showcase-right\">\r\n          <div>{ project() }</div>\r\n        </div>\r\n      </SplitPane>\r\n    </div>\r\n  );\r\n}","import { QuestionCircleOutlined } from \"@ant-design/icons\";\r\nimport { ResponsivePie } from \"@nivo/pie\"\r\nimport { Divider, Tooltip } from \"antd\";\r\nimport JobsList from \"../../assets/JobList.json\";\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport JobListElement from \"../../types/jobListElement\";\r\nimport { IPieChartData} from \"../../types/simulationType\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { IFormField } from \"../../types/simulationtype\";\r\n\r\n/**\r\n * This method renders a pie chart\r\n * @returns JSX.Element that represents a pie chart for simulation\r\n */\r\nexport default function SimReport(): JSX.Element {\r\n    // const dispatch = useDispatch();\r\n    const pieChart = useTypedSelector(state=> state.simulation.InitialNivoPieChartDataArray);\r\n\r\n    const NewNivoPieChartDataArray:IPieChartData[] = new Array<IPieChartData>();\r\n\r\n    // category\r\n    const job = useTypedSelector(state => state.simulation.job) || undefined;\r\n    const housing = useTypedSelector(state => state.simulation.housing) || undefined;\r\n    const transportation = useTypedSelector(state => state.simulation.transportation) || undefined;\r\n    const health = useTypedSelector(state => state.simulation.health) || undefined;\r\n    const mischellaneous = useTypedSelector(state => state.simulation.mischellaneous);\r\n\r\n    // each description\r\n    const jobDesc = job?.description;\r\n    const housingDesc = housing?.description;\r\n    const transportationDesc = transportation?.description;\r\n    const healthDesc = health?.description;\r\n    \r\n    // earnings and expenses\r\n    const job_earning = findSelectedJobWage(JobsList, jobDesc);\r\n\r\n    // since we collect expenses data for a month, we will multiply by 12 \r\n    // to estimate the yearly expenses\r\n    const housingExp = 12*housing?.inputValue || 0;\r\n    const transportationExp = 12*transportation?.inputValue|| 0;\r\n    const healthExp = 12*health?.inputValue || 0;\r\n    \r\n    /**\r\n     * calculates the array of expenses from mischellaneous\r\n     * @param _input Array<MischellaneousProps>\r\n     * @returns number - total mischellaneous expense\r\n     */\r\n    function calculateTotalMiscExpense(_input: Array<IFormField>): number {\r\n        let total = 0;\r\n        \r\n        const temp:number[] = [];\r\n\r\n        _input.forEach(item => item != null && temp.push(12*item.inputValue));\r\n    \r\n        if (!isEmpty(temp)) {\r\n            total = temp.reduce((first, second) => {return first + second});\r\n        }\r\n\r\n        return total;\r\n    }\r\n    \r\n    const totalMiscExpense = (mischellaneous !== undefined && !isEmpty(mischellaneous))? calculateTotalMiscExpense(mischellaneous) : 0;\r\n\r\n    /**\r\n     * This method finds a wage of the target job. \r\n     * If the target job doesn't exist in the job list, \r\n     * it returns the custom wage entered by the user.\r\n     * @param JobList Array<JobListElement>\r\n     * @param target string \r\n     * @returns the wage: number\r\n     */\r\n    function findSelectedJobWage(JobList: Array<JobListElement>, target: string | undefined): number {\r\n        return parseInt(JobList.find((job) => job.value === target)?.average_wage || job?.inputValue?.toString() || \"0\");\r\n    }\r\n    \r\n    /**\r\n     * This method checks if the new chart data is empty\r\n     * @param array IPieChartData[]\r\n     * @returns true if the array is empty; otherwise, false\r\n     */\r\n    function isEmpty(array: Array<any>): boolean {\r\n        return array!== undefined? array.length === 0 : true;\r\n    }\r\n\r\n    /**\r\n     * This method calculate the remaining income amount\r\n     * @param income number\r\n     * @param expenses number[]\r\n     * @returns remaining income\r\n     */\r\n    function calculateBalance(\r\n        income:number, \r\n        ...expenses: number[]): number {\r\n        // calculate the remaining income\r\n        return income-(expenses.reduce((total, next) => total+next,0));\r\n    }\r\n\r\n    let remainingIncome = 0\r\n    \r\n    //console.log(\"job earing\", job_earning)\r\n    if (job_earning !== 0) {\r\n        remainingIncome = calculateBalance(\r\n            job_earning, \r\n            housingExp, \r\n            transportationExp,\r\n            healthExp, \r\n            totalMiscExpense,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * This method adds mischellaneous data to Pie Chart \r\n     * @param item MischellaneousProps\r\n     */\r\n     function addToChart(item: IFormField): void {\r\n        const id = item.description || \"None\";\r\n        const value = 12* item.inputValue || 0;\r\n        const color = \"#ef3b2c\";\r\n        NewNivoPieChartDataArray.push({\"id\": id, \"value\": value, \"color\": color});\r\n    }\r\n\r\n    // if statements check whether the user has selected each category and \r\n    // add the data for the pie chart after each category data is updated\r\n\r\n    if (jobDesc !== undefined) {\r\n        NewNivoPieChartDataArray.push({ \"id\": \"Savings\", \"value\": remainingIncome, \"color\": \"#00bb77\"});\r\n    }\r\n\r\n    if (housingDesc !== undefined) {\r\n        NewNivoPieChartDataArray.push({ \"id\": housingDesc, \"value\": housingExp, \"color\": \"#ff2f50\"});\r\n    }\r\n    if (transportationDesc !== undefined) {\r\n        NewNivoPieChartDataArray.push({ \"id\": transportationDesc, \"value\": transportationExp, \"color\": \"#d73027\"});\r\n    } \r\n\r\n    if (healthDesc !== undefined) {\r\n        NewNivoPieChartDataArray.push({ \"id\": healthDesc, \"value\": healthExp, \"color\": \"#fdae61\"});\r\n    }\r\n    \r\n    if (!isEmpty(mischellaneous)) {\r\n        mischellaneous.forEach((item) => item != null && addToChart(item));\r\n    }\r\n\r\n    // make sure parent container have a defined height when using\r\n    // responsive component, otherwise height will be 0 and\r\n    // no chart will be rendered.\r\n    // website examples showcase many properties,\r\n    // you'll often use just a few of them.\r\n\r\n  // get expenses\r\n  let totalExpense = 0;\r\n\r\n  // find total expense\r\n  totalExpense += housingExp + transportationExp + healthExp + totalMiscExpense;\r\n\r\n  /**\r\n   * This method shows a list of saving areas from Essentials and other categories session\r\n   * \r\n   * @returns JSX.Element that represents a list\r\n   */\r\n  function findPotentialSavingAreas(value: IFormField[]) {\r\n    const tempValue = value.filter((item) => checkExpense(item))\r\n    .map((item: IFormField) => (\r\n    <li>{item.description}</li>\r\n    ))\r\n    if ( tempValue.length === 0 )\r\n        return \"-\"    \r\n    return tempValue\r\n  }\r\n\r\n  /**\r\n   * This method checks whether expense is greater than 100 bucks. \r\n   * This is a simple way to check for potential savings if the user\r\n   * spends more than an average person (who is knowledgeable about \r\n   * budget) does. \r\n   * \r\n   * *** Future vision ***\r\n   * find a dataset of people who spend their money wisely and \r\n   * compare that data with the user data to suggest potential \r\n   * saving areas more efficiently.\r\n   * \r\n   * @param item MischellaneousProps\r\n   * @returns true if validateMessages greater tham 100 bucks; otherwise, false.\r\n   */\r\n  function checkExpense(item: IFormField) {\r\n    return item?.inputValue > 100;\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"Sim-Summary-Heading\">Report</h2> \r\n            <div className=\"Sim-Pie-Chart\">\r\n                <ResponsivePie\r\n                    valueFormat=\">$,\"\r\n                    data={ isEmpty(NewNivoPieChartDataArray)? pieChart: NewNivoPieChartDataArray}\r\n                    margin={{ top: 20, right: 20, bottom: 30, left: 5 }}\r\n                    innerRadius={0.6}\r\n                    padAngle={0.7}\r\n                    cornerRadius={4}\r\n                    colors={{ datum: \"data.color\"}}\r\n                    activeOuterRadiusOffset={8}\r\n                    enableArcLinkLabels={false}\r\n                    />\r\n                <div className=\"SavingExpenseLabel\">Saving and Expense Chart</div>\r\n            </div>\r\n            <div className=\"Sim-Balance\">\r\n                <Divider  orientation=\"left\" plain><h3>Data</h3></Divider>\r\n                <div className=\"Sim-Balance-Data\">\r\n                    <p className=\"Sim-Balance-text\">Selected job - {jobDesc || \"Nothing is selected\"}</p>\r\n                    <p className=\"Sim-Balance-text\">Annual income - <NumberFormat value={job_earning} displayType={\"text\"} thousandSeparator={true} prefix={\"$\"}/></p>\r\n                    <p className=\"Sim-Balance-text\">Monthly expenses - <NumberFormat value={Math.floor(totalExpense/12)} displayType={\"text\"} thousandSeparator={true} prefix={\"$\"}/></p>\r\n                    <p className=\"Sim-Balance-text\">Annual savings - <span style={{color: remainingIncome >=0 ? \"black\": \"red\"}}><NumberFormat value={remainingIncome} displayType={\"text\"} thousandSeparator={true} prefix={\"$\"}/></span></p>\r\n                </div> \r\n                <Divider  orientation=\"left\" plain>\r\n                    <h3>\r\n                        <Tooltip\r\n                            placement=\"rightTop\"\r\n                            title=\"Sections where monthly expenses are spent over\r\n                            $100 for other categories will appear in this potential saving areas. \r\n                            (We can also let the user to set a limitation for which money is spent \r\n                            for those categories).\"    \r\n                        > Potential saving areas <QuestionCircleOutlined/> </Tooltip>\r\n                    </h3>\r\n                </Divider>\r\n                <div className=\"Sim-Balance-Data\">\r\n                    {mischellaneous !== undefined && findPotentialSavingAreas(mischellaneous)}\r\n                </div>\r\n            </div> \r\n        </div>\r\n    )\r\n}","import {IPieChartData} from \"../types/simulationType\";\r\nimport {SimulationActionsTypesEnum  as SimulationAction} from \"../types/actions\";\r\nimport { IHelperContentElement } from \"../types/helperContentElement\";\r\nimport { IFormField } from \"../types/simulationtype\";\r\n\r\n// ********************* ACTIONS FOR FORM ********************* //\r\nexport type Action =\r\n  | { type: SimulationAction.UPDATE_JOB; payload: IFormField }\r\n  | { type: SimulationAction.UPDATE_HOUSING; payload: IFormField}\r\n  | { type: SimulationAction.UPDATE_TRANSPORTATION, payload: IFormField}\r\n  | { type: SimulationAction.UPDATE_HEALTH, payload: IFormField}\r\n  | { type: SimulationAction.UPDATE_MISCHELLANEOUS, payload: Array<IFormField>}\r\n  | { type: SimulationAction.CLEAR }\r\n  | { type: SimulationAction.SAVE, payload: any}\r\n  | { type: SimulationAction.LOAD_INITIAL_PIE_CHART}\r\n  | { type: SimulationAction.UPDATE_PIE_CHART, payload: Array<IPieChartData>}\r\n  | { type: SimulationAction.UPDATE_CONTENT, payload: IHelperContentElement}\r\n  | { type: SimulationAction.LOAD_FROM_LOCAL_STORAGE};\r\n\r\n\r\nexport const updateJob = (_payload: IFormField): Action => ({\r\n  type: SimulationAction.UPDATE_JOB,\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateHousing = (_payload: IFormField): Action => ({\r\n  type: SimulationAction.UPDATE_HOUSING,\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateTransportation = (_payload: IFormField): Action => ({\r\n  type: SimulationAction.UPDATE_TRANSPORTATION,\r\n  payload: _payload,\r\n});\r\n\r\nexport const updateHealth = (_payload: IFormField): Action => ({\r\n  type: SimulationAction.UPDATE_HEALTH,\r\n  payload: _payload\r\n})\r\n\r\nexport const updateMischellaneous = (\r\n  _payload: Array<IFormField>\r\n): Action => ({\r\n  type: SimulationAction.UPDATE_MISCHELLANEOUS,\r\n  payload: _payload,\r\n});\r\n\r\nexport const loadInitialPieChart = (): Action => ({\r\n  type: SimulationAction.LOAD_INITIAL_PIE_CHART\r\n});\r\n\r\nexport const updatePieChart = (_payload: Array<IPieChartData>): Action => ({\r\n  type: SimulationAction.UPDATE_PIE_CHART,\r\n  payload: _payload\r\n})\r\n\r\nexport const updateHelperContent = (_payload: IHelperContentElement): Action => ({\r\n  type: SimulationAction.UPDATE_CONTENT,\r\n  payload: _payload\r\n})\r\n\r\nexport const loadFromLocalStorage = (): Action => ({\r\n  type: SimulationAction.LOAD_FROM_LOCAL_STORAGE\r\n});\r\n\r\n\r\nexport const clear = (): Action => ({\r\n  type: SimulationAction.CLEAR,\r\n});\r\n\r\nexport const save = (_payload: any): Action => ({\r\n  type: SimulationAction.SAVE,\r\n  payload: _payload\r\n})\r\n// ****************************************************************** //\r\n","/**\r\n     * Ref: \r\n     * https://regexr.com/3cr6f\r\n     * https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript?page=1&tab=votes#tab-top\r\n     * \r\n     * Thousands separators\r\n     * \r\n     * The regex uses 2 lookahead assertions:\r\n     * Positive Lookahead\r\n     * Example: \\d(?=px)\r\n     * 1pt 2px 3em 4px\r\n     * \r\n     * ?=(\\d{3})\r\n     * a positive one to look for any point in the string \r\n     * that has a multiple of 3 digits in a row after it,\r\n     * \r\n     * ?!\\d\r\n     * Negative Lookahead\r\n     * Example: \\d(?!px)\r\n     * 1pt 2px 3em 4px\r\n     * \r\n     * a negative assertion to make sure that point only has \r\n     * exactly a multiple of 3 digits. \r\n     * \r\n     * The replacement expression in the formatter puts a comma there.\r\n     * */\r\n\r\n export const inputNumberFormat = new RegExp(/\\B(?=(\\d{3})+(?!\\d))/g);\r\n export const inputNumberParser = new RegExp(/\\$\\s?|(,*)/g);","export default __webpack_public_path__ + \"static/media/medical.bcd54b07.svg\";","/**\r\n * Options for Housing \r\n */\r\nexport const HousingOptions = [\r\n  { label: \"Buy a house\", value: \"housing\" },\r\n  { label: \"Rent\", value: \"rent\"},\r\n  { label: \"Pay mortgage\", value: \"mortgage\"},\r\n  { label: \"Live with family\",  value: \"family\"},\r\n];\r\n\r\n/**\r\n * Options for Transportation\r\n */\r\nexport const TransportationOptions = [\r\n  { label: \"Car\", value: \"car\"},\r\n  { label: \"Public Transportation\", value: \"public\"},\r\n  { label: \"Bicycle\", value: \"bicycle\"},\r\n  { label: \"On Foot\", value: \"foot\"}\r\n];\r\n\r\n/**\r\n * Options for Health\r\n */\r\n export const HealthOptions = [\r\n  { label: \"Insurance\", value: \"insurance\"},\r\n  { label: \"Health Care\", value: \"public\" },\r\n  { label: \"Medi-Cal\", value: \"medi-cal\"}\r\n];\r\n\r\n","import { PlusCircleOutlined} from \"@ant-design/icons\";\r\nimport { Divider, Form, Input, InputNumber, Select } from \"antd\";\r\nimport * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateHelperContent } from \"../../actions/simulationActions\";\r\nimport { inputNumberFormat, inputNumberParser } from \"./regex\";\r\nimport \"../../style/Form.css\";\r\nimport { IHelperContentElement } from \"../../types/helperContentElement\";\r\nimport HealthHelperList from \"../../assets/HealthHelperList.json\";\r\nimport MedicalIcon from \"../../assets/icons/medical.svg\";\r\nimport { HealthOptions } from \"../../constants/FormOptions\";\r\nimport { healthTooltip } from \"../../constants/Tooltips\";\r\nimport { HealthMessage } from \"../../constants/SimHelperContent\";\r\nimport { IFormItemProps } from \"../../types/simulationType\";\r\n\r\n\r\n// Option componect from Ant Select\r\nconst { Option } = Select;\r\nlet index = 0;\r\n\r\n\r\n/**\r\n * This is a sub-component that represents Health\r\n * @returns JSX.Element that represents a question and a dropdown\r\n */\r\nexport const Health:React.FC<IFormItemProps> = ({name, inputValue, handleChange}):JSX.Element => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // content for health resources\r\n    const healthContent: IHelperContentElement = {\r\n        description: {\r\n            message: HealthMessage,\r\n            img: MedicalIcon,\r\n        },\r\n        links: HealthHelperList\r\n    }\r\n\r\n    // get label key values from HousingOptions.json\r\n    const labels = HealthOptions.map(obj => obj.label);\r\n\r\n    // initialize the option state\r\n    const [optionState, setOptionState] = React.useState({\r\n        items: labels,\r\n        name: {\r\n            label: \"\",\r\n            value: \"other\"\r\n        }\r\n    })\r\n\r\n    /**\r\n     * This method listens for the user input change for custom dropdown\r\n     * @param event React.ChangeEvent<HTMLInputElement>\r\n     */\r\n    function onNameChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const {items} = optionState;\r\n        setOptionState({\r\n            items: items,\r\n            name: {\r\n                label: event.target.value,\r\n                value: \"other\"\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * adds the user custom option into the optionState, but \r\n     * this does not update our HousingOpitions.json\r\n     */\r\n    function addItem() {\r\n        const {items, name} = optionState;\r\n        setOptionState({\r\n            items: [...items, name.label || `New item ${index++}`],\r\n            name: {\r\n                label: \"\",\r\n                value: \"other\"\r\n            },\r\n        })\r\n    }\r\n        \r\n    return(\r\n        <div onClick={() => dispatch(updateHelperContent(healthContent))}>\r\n            <Form.Item\r\n                label={name}\r\n                tooltip= {healthTooltip}\r\n                name={[name, \"description\"]}   \r\n            >\r\n                <Select\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a housing option\"\r\n                    onChange={handleChange}\r\n                    dropdownRender={menu => (\r\n                    <div>\r\n                        {menu}\r\n                        <Divider style={{ margin: \"4px 0\" }} />\r\n                        <div style={{ display: \"flex\", flexWrap: \"nowrap\", padding: 8 }}>\r\n                            <Input style={{ flex: \"auto\" }} value={optionState.name.label} onChange={onNameChange} />\r\n                            <button\r\n                                style={{ flex: \"none\", padding: \"8px\", display: \"block\", cursor: \"pointer\" }}\r\n                                onClick={addItem}\r\n                            >\r\n                                <PlusCircleOutlined /> Add item\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                > \r\n                {optionState.items.map((item) => (\r\n                    <Option key={item} value={item}>{item}</Option>\r\n                ))}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item \r\n                noStyle\r\n                shouldUpdate\r\n            >\r\n                {({getFieldValue}) => \r\n                    getFieldValue(name)?.description !== undefined ? (\r\n                        <Form.Item \r\n                            name={[name, \"inputValue\"]}\r\n                            label=\"Expense\"\r\n                        >\r\n                            <InputNumber\r\n                                min={0}\r\n                                max={9999}\r\n                                formatter={value => `$ ${value}`.replace(inputNumberFormat, \",\")}\r\n                                parser={value => value !== undefined? parseInt(value.replace(inputNumberParser, \"\")): 0}\r\n                                style={{ margin: \"0 16px\" }}\r\n                                value={inputValue || undefined}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Form.Item>\r\n                    ): null\r\n                }\r\n            </Form.Item>\r\n        </div>\r\n    )\r\n};\r\n","// description for occupation helper\r\nexport const JobMessage = \"Finding a career and choosing one that fits your needs \" \r\n+ \"and social life are not very easy tasks. To help you with your career goals, \"\r\n+ \"we collected and displayed a few useful resources and public data from various sites below.\"\r\n\r\n// description for housing helper\r\nexport const HousingMessage = \"Planning to buy a house or rent with a roommate? Whatever you are doing, the below \"\r\n+ \" are a few places you might want to look at first.\"\r\n\r\n// description for transportation assistant\r\nexport const CommuteMessage = \"If you want to know how to calculate your commuting costs, make sure to read the article \"\r\n+ \"from the Balance below.\";\r\n\r\n// description for health assistant\r\nexport const HealthMessage = \"Refer to the links below to estimate your healthcare cost.\"\r\n\r\n// description for essentials and other categories\r\nexport const MiscMessage = \"Other categories such as food, entertainment, online shopping and etc. can relatively \"\r\n+ \"drain your wallet. Check out the following links to learn more about those costs.\"\r\n\r\n\r\n\r\n","// tooltip for occupation\r\nexport const jobTooltip = \"Choosing one of the career options will generate job earnings.To learn details about a career, you can search it under the showcase \" + \r\n\"page. You can also click this section and simulation assistant will \" +\r\n\"give you links to resources, where our data are referenced from.\";\r\n\r\nexport const housingTooltip = \"Housing is one of the key area where we think is the most of \" +\r\n\"the budget is spent. You can learn more information about housing \" +\r\n\"prices, rent prices and mortage by clicking on this section.\";\r\n\r\nexport const commuteTooltip = \"Transportation is another important area where our budget \" +\r\n\"are used. You can learn more details about commuting cost and other \" +\r\n\"interesting article by clicking on this section.\"\r\n\r\nexport const healthTooltip = \"Health is also another main area that our budget \" +\r\n\"is spent. You can learn more information about health insurance \" +\r\n\"plans and cost by clicking on this section.\"\r\n\r\nexport const miscTooltip = \"Here you can enter other expenses that we did not cover \" +\r\n\"in our form above.\"","export default __webpack_public_path__ + \"static/media/finding.f453ceaa.svg\";","import { Form, InputNumber, Select, Divider, Input} from \"antd\";\r\nimport * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateHelperContent } from \"../../actions/simulationActions\";\r\nimport { HousingOptions } from \"../../constants/FormOptions\";\r\nimport { inputNumberFormat, inputNumberParser } from \"./regex\";\r\nimport HousingHelperList from \"../../assets/HousingHelperList.json\"\r\nimport \"../../style/Form.css\"\r\nimport { IHelperContentElement } from \"../../types/helperContentElement\";\r\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\r\nimport FindingHouse from \"../../assets/icons/finding.svg\";\r\nimport { housingTooltip } from \"../../constants/Tooltips\";\r\nimport { HousingMessage } from \"../../constants/SimHelperContent\";\r\nimport { IFormItemProps } from \"../../types/simulationType\";\r\n\r\n// Option componect from Ant Select\r\nconst { Option } = Select;\r\nlet index = 0;\r\n\r\n/**\r\n * This is a sub-component that represents Housing\r\n * @returns a JSX Element that represents a question and a dropdown \r\n */\r\n\r\nexport const Housing:React.FC<IFormItemProps> = ({handleChange, name, inputValue}): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n\r\n    // content of housing for sim helper\r\n    const housingContent:IHelperContentElement = {\r\n        description: {\r\n            message: HousingMessage,\r\n            img: FindingHouse\r\n        },\r\n        links: HousingHelperList\r\n    }\r\n\r\n    // get label key values from HousingOptions.json\r\n    const labels = HousingOptions.map(obj => obj.label);\r\n\r\n    // initialize the option state\r\n    const [optionState, setOptionState] = React.useState({\r\n        items: labels,\r\n        name: {\r\n            label: \"\",\r\n            value: \"other\"\r\n        }\r\n    })\r\n\r\n    /**\r\n     * This method listens for the user input change for custom dropdown\r\n     * @param event React.ChangeEvent<HTMLInputElement>\r\n     */\r\n    function onNameChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const {items} = optionState;\r\n        setOptionState({\r\n            items: items,\r\n            name: {\r\n                label: event.target.value,\r\n                value: \"other\"\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * adds the user custom option into the optionState, but \r\n     * this does not update our HousingOpitions.json\r\n     */\r\n    function addItem() {\r\n        const {items, name} = optionState;\r\n        setOptionState({\r\n            items: [...items, name.label || `New item ${index++}`],\r\n            name: {\r\n                label: \"\",\r\n                value: \"other\"\r\n            },\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => dispatch(updateHelperContent(housingContent))}>\r\n            <Form.Item\r\n                label={name}\r\n                tooltip= {housingTooltip}\r\n                name={[name, \"description\"]}   \r\n            >\r\n                <Select\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a housing option\"\r\n                    onChange={handleChange}\r\n                    dropdownRender={menu => (\r\n                    <div>\r\n                        {menu}\r\n                        <Divider style={{ margin: \"4px 0\" }} />\r\n                        <div style={{ display: \"flex\", flexWrap: \"nowrap\", padding: 8 }}>\r\n                            <Input style={{ flex: \"auto\" }} value={optionState.name.label} onChange={onNameChange} />\r\n                            <button\r\n                                style={{ flex: \"none\", padding: \"8px\", display: \"block\", cursor: \"pointer\" }}\r\n                                onClick={addItem}\r\n                            >\r\n                                <PlusCircleOutlined /> Add item\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                > \r\n                    {optionState.items.map((item) => (\r\n                        <Option key={item} value={item}>{item}</Option>\r\n                    ))}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item \r\n                noStyle\r\n                shouldUpdate\r\n            >\r\n                {({getFieldValue, isFieldTouched}) => \r\n                    getFieldValue(name)?.description !== undefined || isFieldTouched(name)? (\r\n                        <Form.Item \r\n                            name={[name, \"inputValue\"]}\r\n                            label=\"Expense\"\r\n                        >\r\n                            <InputNumber\r\n                                min={0}\r\n                                max={9999}\r\n                                formatter={value => `$ ${value}`.replace(inputNumberFormat, \",\")}\r\n                                parser={value => value !== undefined? parseInt(value.replace(inputNumberParser, \"\")): 0}\r\n                                style={{ margin: \"0 16px\" }}\r\n                                value={inputValue}\r\n                            />\r\n                        </Form.Item>\r\n                    ): null\r\n                }\r\n            </Form.Item>\r\n        </div>\r\n    )\r\n};","export default __webpack_public_path__ + \"static/media/categories.65c41be1.svg\";","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Form, Input, Button, Space, InputNumber} from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined} from \"@ant-design/icons\";\r\nimport { inputNumberFormat, inputNumberParser } from \"./regex\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateHelperContent } from \"../../actions/simulationActions\";\r\nimport { IHelperContentElement } from \"../../types/helperContentElement\";\r\nimport MiscHelperList from \"../../assets/MiscHelperList.json\";\r\nimport Categories from \"../../assets/icons/categories.svg\";\r\nimport { MiscMessage } from \"../../constants/SimHelperContent\";\r\nimport { miscTooltip } from \"../../constants/Tooltips\";\r\n\r\n/**\r\n * \r\n * @returns a JSX.Element that represents a form list\r\n */\r\nexport const Mischellaneous:React.FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // content for mischellaneous\r\n    const miscContent: IHelperContentElement = {\r\n        description: {\r\n            message: MiscMessage,\r\n            img: Categories\r\n        },\r\n        links: MiscHelperList,\r\n    }\r\n    \r\n    return (\r\n        <div onClick={() => dispatch(updateHelperContent(miscContent))}>\r\n            <Form.Item\r\n                label=\"Essentials and Other Categories\"\r\n                tooltip={miscTooltip}\r\n            >\r\n                <Form.List\r\n                    name=\"Mischellaneous\"\r\n                >\r\n                    {(fields, { add, remove }) => {\r\n                        // console.log(\"Mischellaneous fields:\", JSON.stringify(fields));\r\n                        return (\r\n                        <>\r\n                            {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                                <Space key={key} style={{ display: \"flex\", marginBottom: 8 }} align=\"baseline\">\r\n                                    <Form.Item\r\n                                        {...restField}\r\n                                        name={[name, \"description\"]}\r\n                                        fieldKey={[fieldKey, \"description\"]}\r\n                                        rules={[{ required: true, message: \"Missing description\" }]}\r\n                                    >\r\n                                        <Input placeholder=\"Description\"\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        {...restField}\r\n                                        name={[name, \"inputValue\"]}\r\n                                        fieldKey={[fieldKey, \"inputValue\"]}\r\n                                        rules={[\r\n                                            { required: true},\r\n                                            { type: \"number\", min: 0, max: 9999} \r\n                                        ]}\r\n                                    >\r\n                                        <InputNumber \r\n                                            placeholder=\"Expense\" \r\n                                            formatter={value => `$ ${value}`.replace(inputNumberFormat, \",\")}\r\n                                            parser={value => value !== undefined? parseInt(value.replace(inputNumberParser, \"\")): 0}\r\n                                            style={{ margin: \"0 16px\" }}\r\n                        \r\n                                        />\r\n                                    </Form.Item>\r\n                                    <MinusCircleOutlined onClick={() => remove(name)}/>\r\n                                </Space>\r\n                            ))}\r\n                            <Form.Item>\r\n                                <Button type=\"dashed\" onClick={() => add()} icon={<PlusOutlined />}>\r\n                                    Add field\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </>\r\n                    )}}\r\n                </Form.List>\r\n            </Form.Item>\r\n        </div>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/search-job.aa358b3e.svg\";","import { AutoComplete, Form, InputNumber} from \"antd\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {updateHelperContent } from \"../../actions/simulationActions\";\r\nimport JobsList from \"../../assets/JobList.json\";\r\nimport JobListElement from \"../../types/jobListElement\";\r\nimport OccupationHelperList from \"../../assets/OccupationHelperList.json\";\r\nimport SearchJob from \"../../assets/icons/search-job.svg\"\r\nimport { jobTooltip } from \"../../constants/Tooltips\";\r\nimport { JobMessage } from \"../../constants/SimHelperContent\";\r\nimport { inputNumberFormat, inputNumberParser } from \"./regex\";\r\nimport { IFormItemProps } from \"../../types/simulationType\";\r\n\r\n/**\r\n * This is a react function component for occupation. \r\n * @param props are question string and dispatch function\r\n * @returns a JSX Element that represents part of a form for asking user's occupation\r\n */\r\nexport const Occupation: React.FC<IFormItemProps> = ({name, inputValue, handleChange}) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // unknown wage filtered list\r\n  const filteredList = JobsList.filter((job) => job.average_wage !== \"Unknown\" && job) as JobListElement[];\r\n\r\n  // content inside simulation assistant for occupation\r\n  const occupationContent = {\r\n    description: {\r\n      message: JobMessage,\r\n      img: SearchJob,\r\n    },\r\n    links: OccupationHelperList,\r\n  }\r\n\r\n  return (\r\n  <div onClick={() => dispatch(updateHelperContent(occupationContent))}>\r\n    <Form.Item\r\n      label={name} \r\n      rules={[{required: true}]} \r\n      tooltip = {jobTooltip}\r\n      name={[name, \"description\"]}\r\n    >\r\n      <AutoComplete\r\n        allowClear\r\n        style={{ width: 200 }}\r\n        options={filteredList}\r\n        onChange={handleChange}\r\n        placeholder=\"Type your occupation here\"\r\n        filterOption={(inputValue, option) =>\r\n          option?.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n        }\r\n    />\r\n    </Form.Item>\r\n    <Form.Item\r\n      noStyle\r\n      shouldUpdate\r\n    >\r\n      {({getFieldValue}) =>\r\n        getFieldValue(name)?.description !== undefined && \r\n        filteredList.findIndex((job) => job.value === getFieldValue(name)?.description) === -1\r\n        ? (\r\n          <Form.Item\r\n            name={[name, \"inputValue\"]}\r\n            label=\"Job Earnings\"\r\n          >\r\n            <InputNumber\r\n              formatter={value => `$ ${value}`.replace(inputNumberFormat, \",\")}\r\n              parser={value => value !== undefined? parseInt(value.replace(inputNumberParser, \"\")): 0}\r\n              style={{ margin: \"0 16px\" }}\r\n              value={inputValue}\r\n            />\r\n          </Form.Item>\r\n        ): null\r\n      }\r\n    </Form.Item>\r\n  </div>\r\n  )\r\n};\r\n","export default __webpack_public_path__ + \"static/media/transportation.d9b43e5a.svg\";","import { Select, InputNumber, Input, Divider, Form} from \"antd\";\r\nimport * as React from \"react\";\r\nimport {\r\n  updateHelperContent,\r\n} from \"../../actions/simulationActions\";\r\nimport { TransportationOptions } from \"../../constants/FormOptions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { inputNumberFormat, inputNumberParser } from \"./regex\";\r\nimport CommuteHelperList from \"../../assets/CommuteHelperList.json\";\r\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\r\nimport TransportationIcon from \"../../assets/icons/transportation.svg\";\r\nimport { commuteTooltip } from \"../../constants/Tooltips\";\r\nimport { CommuteMessage } from \"../../constants/SimHelperContent\";\r\nimport { IFormItemProps } from \"../../types/simulationType\";\r\n\r\n// Option componect from Ant Select\r\nconst { Option } = Select;\r\nlet index = 0;\r\n\r\n/**\r\n * \r\n * @returns JSX.Element that represents a question form \r\n */\r\nexport const Transportation:React.FC<IFormItemProps> = ({name, inputValue, handleChange}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    // content of transportation for sim helper\r\n    const transportationContent = {\r\n        description: {\r\n            message: CommuteMessage,\r\n            img: TransportationIcon,\r\n        },\r\n        links: CommuteHelperList\r\n    }\r\n\r\n    // get label key values\r\n    const labels = TransportationOptions.map(obj => obj.label);\r\n    \r\n    const [optionState, setOptionState] = React.useState({\r\n        items: labels,\r\n        name: {\r\n            label: \"\",\r\n            value: \"other\"\r\n        }\r\n    })\r\n\r\n    function onNameChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const {items} = optionState;\r\n        setOptionState({\r\n            items: items,\r\n            name: {\r\n                label: event.target.value,\r\n                value: \"other\"\r\n            }\r\n        })\r\n    }\r\n\r\n    function addItem() {\r\n        const {items, name} = optionState;\r\n        setOptionState({\r\n            items: [...items, name.label || `New item ${index++}`],\r\n            name: {\r\n                label: \"\",\r\n                value: \"other\"\r\n            },\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => dispatch(updateHelperContent(transportationContent))}>\r\n            <Form.Item\r\n                label={name}\r\n                tooltip = {commuteTooltip}\r\n                name={[name, \"description\"]}\r\n            >\r\n                <Select\r\n                    placeholder=\"Select a transportation mode\"\r\n                    style={{ width: 200 }}\r\n                    onChange={handleChange}\r\n                    dropdownRender={menu => (\r\n                        <div>\r\n                            {menu}\r\n                            <Divider style={{ margin: \"4px 0\" }} />\r\n                            <div style={{ display: \"flex\", flexWrap: \"nowrap\", padding: 8 }}>\r\n                                <Input style={{ flex: \"auto\" }} value={optionState.name.label} onChange={onNameChange} />\r\n                                <button\r\n                                    style={{ flex: \"none\", padding: \"8px\", display: \"block\", cursor: \"pointer\" }}\r\n                                    onClick={addItem}\r\n                                >\r\n                                    <PlusCircleOutlined /> Add item\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        )}\r\n                >\r\n                    {optionState.items.map((item) => (\r\n                        <Option key={item} value={item}>{item}</Option>\r\n                    ))}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item\r\n                noStyle\r\n                shouldUpdate\r\n            >\r\n                {({getFieldValue}) => \r\n                    getFieldValue(\"Transportation\")?.description !== undefined ? (\r\n                        <Form.Item \r\n                            name={[name, \"inputValue\"]}\r\n                            label=\"Expense\"\r\n                        >\r\n                            <InputNumber\r\n                                min={0}\r\n                                max={9999}\r\n                                formatter={value => `$ ${value}`.replace(inputNumberFormat, \",\")}\r\n                                parser={value => value !== undefined? parseInt(value.replace(inputNumberParser, \"\")): 0}\r\n                                style={{ margin: \"0 16px\" }}\r\n                                value={inputValue}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Form.Item>\r\n                    ): null\r\n                }\r\n\r\n            </Form.Item>\r\n\r\n        </div>\r\n    )\r\n};\r\n","import { ClearOutlined, QuestionCircleOutlined, SaveOutlined } from \"@ant-design/icons\";\r\nimport { Button, Form, message, Space, Tooltip } from \"antd\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { clear, updateHousing, updateMischellaneous, save, updateTransportation, updateJob, updateHealth} from \"../../actions/simulationActions\";\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { IFormField } from \"../../types/simulationtype\";\r\nimport { Health } from \"../formSubComponents/health\";\r\nimport { Housing } from \"../formSubComponents/housing\";\r\nimport { Mischellaneous } from \"../formSubComponents/miscellaneous\";\r\nimport { Occupation } from \"../formSubComponents/occupation\";\r\nimport { Transportation } from \"../formSubComponents/transportation\";\r\n\r\nexport interface FormFieldData {\r\n    name: string | number | (string | number)[];\r\n    value?: any;\r\n    touched?: boolean;\r\n}\r\n\r\nexport interface CustomizedSimulationProps {\r\n    //onChange: (fields: FormFieldData[]) => void;\r\n    fields: FormFieldData[];\r\n}\r\n\r\n// form input fields validation\r\nconst validateMessages = {\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    required: \"'${name}' is required!\",\r\n    types: {\r\n        number: \"$'{name}' is not a valid number!\"\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line no-template-curly-in-string\r\n        range: \"$'{name}' must be between ${min} and ${max}\",\r\n    },\r\n}\r\n\r\n/**\r\n * \r\n * @returns JSX.Element that represents a form\r\n */\r\nexport const SimulationForm: React.FC<CustomizedSimulationProps> = ({fields}): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    const [form] = Form.useForm(); \r\n\r\n    // get each form component state\r\n    const selectedJob: IFormField | undefined = useTypedSelector(state=>state.simulation.job);\r\n    const selectedHouseOption: IFormField | undefined = useTypedSelector(state => state.simulation.housing);\r\n    const selectedCommuteOption: IFormField | undefined = useTypedSelector(state => state.simulation.transportation);\r\n    const selectedHealthOption: IFormField | undefined = useTypedSelector(state=>state.simulation.health);\r\n    const selectedMisc:IFormField[] | undefined = useTypedSelector(state=>state.simulation.mischellaneous);\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            Occupation: selectedJob,\r\n            Housing: selectedHouseOption,\r\n            Transportation: selectedCommuteOption,\r\n            Health: selectedHealthOption,\r\n            Mischellaneous: selectedMisc\r\n        })\r\n    }, [dispatch, form, selectedJob, selectedHouseOption, selectedCommuteOption, selectedHealthOption, selectedMisc]);\r\n\r\n    /**\r\n     * clear local storage and reset the form fields to initial states\r\n     */\r\n    const onClear = async () => {\r\n        form.resetFields();\r\n        dispatch(clear());\r\n        message.success(\"File successfully deleted\");\r\n    };\r\n\r\n    /**\r\n     * This method saves the user input into local storage.\r\n     * (wants to display error message when the user left empty fields)\r\n     * @param values any\r\n     */\r\n    const onFinish = (values: any) => {\r\n        try {\r\n            dispatch(save(values));\r\n            message.success(\"File successfully saved\");\r\n        } catch (error) {\r\n            message.error(\"File save failed\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * shows an error message when the user try to save an empty form\r\n     * @param errorInfo \r\n     */\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log(\"Failed:\", errorInfo);\r\n        message.error(\"File save Failed\")\r\n    }\r\n\r\n    // listen to each form fiedl value change\r\n    const handleChange = (value: any,) => {\r\n        console.log(\"handle change: \", JSON.stringify(value));\r\n    }\r\n\r\n    // hanlde form field value change\r\n    const handleValuesChange = (values: any) => {\r\n        \r\n        if (form.isFieldTouched(\"Occupation\")) {\r\n            dispatch(updateJob(values[\"Occupation\"]));\r\n        }\r\n        \r\n        if (form.isFieldTouched(\"Housing\")) {\r\n            dispatch(updateHousing(values[\"Housing\"]));\r\n        }\r\n\r\n        if (form.isFieldTouched(\"Transportation\")) {\r\n            dispatch(updateTransportation(values[\"Transportation\"]));\r\n        }\r\n\r\n        if (form.isFieldTouched(\"Health\")) {\r\n            dispatch(updateHealth(values[\"Health\"]));\r\n        }\r\n\r\n        if (form.isFieldTouched(\"Mischellaneous\")) {\r\n            dispatch(updateMischellaneous(values[\"Mischellaneous\"]));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"Lifestyle-title\">\r\n                <Tooltip \r\n                    placement=\"rightTop\"\r\n                    title=\"Fill out the form below to help you choose lifestyle options\"\r\n                >\r\n                    Lifestyle Simulation <QuestionCircleOutlined/>\r\n                </Tooltip>\r\n            </h2>\r\n            <Form \r\n                layout=\"vertical\"\r\n                name=\"simulation_global_state\"\r\n                form={form}  \r\n                fields={fields}\r\n                onValuesChange={(_, allValues) => {\r\n                    console.log(\"all values:\", JSON.stringify(allValues));\r\n                    handleValuesChange(allValues);\r\n                }}\r\n                validateMessages={validateMessages}\r\n                onFinish={onFinish} \r\n                onFinishFailed={onFinishFailed}\r\n            >\r\n                <div  className = \"Form-Components\">\r\n                    <Occupation handleChange={handleChange} name=\"Occupation\" inputValue={selectedJob?.inputValue}/>\r\n                </div>\r\n\r\n                <div className = \"Form-Components\">\r\n                    <Housing handleChange={handleChange} name=\"Housing\" inputValue={selectedHouseOption?.inputValue}/>\r\n                </div>\r\n                \r\n                <div className = \"Form-Components\">\r\n                    <Transportation handleChange={handleChange} name=\"Transportation\" inputValue={selectedCommuteOption?.inputValue}/>\r\n                </div>\r\n\r\n                <div className = \"Form-Components\">\r\n                    <Health handleChange={handleChange} name=\"Health\" inputValue={selectedHealthOption?.inputValue}/>\r\n                </div>\r\n\r\n                <div className = \"Form-Components\">\r\n                    <Mischellaneous/>\r\n                </div>\r\n                \r\n                <div className=\"Sim-buttons\">\r\n                    <Space direction=\"horizontal\" style={{float: \"right\", margin: 8}}>\r\n                        <Form.Item className=\"Save-Button\">\r\n                            <Tooltip title=\"All simulation data will be saved on local storage\" color={\"blue\"} key={\"blue\"}>\r\n                                <Button \r\n                                    type=\"primary\" \r\n                                    htmlType=\"submit\" \r\n                                    icon={<SaveOutlined />} \r\n                                    shape=\"round\"\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item className=\"Reset-Button\">\r\n                            <Tooltip title=\"All simulation data will be discarded\" color={\"red\"} key={\"red\"}>\r\n                                <Button type=\"primary\" htmlType=\"button\" onClick={onClear} danger icon={<ClearOutlined />} shape=\"round\">\r\n                                    Reset\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </Form.Item>\r\n                    </Space>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    );\r\n}","import { QuestionCircleOutlined } from \"@ant-design/icons\";\r\nimport { Divider, Space, Tooltip, Typography } from \"antd\"\r\nimport { useTypedSelector } from \"../../reducers\";\r\n\r\n/**\r\n * \r\n * @returns JSX.Element that represents a helper\r\n */\r\nexport const SimulationHelper: React.FC = (): JSX.Element => {\r\n\r\n    // get contents from each form component\r\n    const message = useTypedSelector(state=>state.simulation.helperContent.description.message);\r\n    const flaticon = useTypedSelector(state=>state.simulation.helperContent.description.img);\r\n    const links = useTypedSelector(state=>state.simulation.helperContent.links);\r\n\r\n    return (\r\n        <div className=\"Sim-Helper\">\r\n            <div className=\"Sim-Helper-Heading\">\r\n                <h2>\r\n                    <Tooltip \r\n                        placement=\"rightTop\" \r\n                        title=\"This is a simulation assistant, where you can find more \r\n                        information about expenses for each specific category.\r\n                        Click on each section on the form to activate the simulation\r\n                        assistant.\"\r\n                    >\r\n                        Simulation Assistant <QuestionCircleOutlined/>\r\n                    </Tooltip>\r\n                </h2>\r\n            </div>\r\n            <div className=\"Container-Helper-main\">\r\n                <div className=\"Sim-Helper-Icons\">\r\n                    <img className=\"flaticon\" alt =\"assistant\" src={flaticon}></img>\r\n                </div>\r\n                <div className=\"Sim-Helper-Message\">\r\n                    <p>{message}</p>\r\n                </div>\r\n            \r\n                <div>\r\n                    <Divider orientation=\"left\" plain><h3>Useful Sites</h3></Divider>\r\n                    <div className=\"Sim-Helper-Cards\">\r\n                        <Space split={<Divider type=\"vertical\"/>} wrap>\r\n                            {links?.filter((item) => item.type===\"site\")\r\n                            .map((item, index) => (\r\n                                <Typography.Link key={index} href={item.url} target=\"_blank\" rel=\"noreferrer noopener\">{item.source}</Typography.Link>\r\n                            )) || \"-\"\r\n                            } \r\n                        </Space>    \r\n                    </div>\r\n                    <Divider  orientation=\"left\" plain><h3>Articles</h3></Divider>\r\n                    <div className=\"Sim-Helper-Cards\">\r\n                        <Space split={<Divider type=\"vertical\"/>} wrap>\r\n                            {links?.filter((item) => item.type===\"article\")\r\n                            .map((item, index) => (\r\n                                <Typography.Link key={index} href={item.url} target=\"_blank\" rel=\"noreferrer noopener\">{item.source}</Typography.Link>\r\n                            )) || \"-\"\r\n                            } \r\n                        </Space>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { SplitPane } from \"react-collapse-pane\";\r\nimport {resizerOptions} from \"../assets/ResizerOptions\";\r\nimport \"../style/Simulation.css\";\r\nimport SimReport from \"../components/simComponents/SimReport\";\r\nimport { SimulationForm } from \"../components/simComponents/SimForm\";\r\nimport { SimulationHelper } from \"../components/simComponents/SimHelper\";\r\n\r\n/**\r\n * \r\n * @returns a JSX.Element that represents the simulation page\r\n */\r\nexport default function Simulation(): JSX.Element {\r\n\r\n    const initialSizes = [200, 300, 250]\r\n\r\n    return (\r\n        <div className=\"Simulation-Root\">\r\n            <SplitPane\r\n                split=\"vertical\"      \r\n                initialSizes={initialSizes}\r\n                resizerOptions={resizerOptions}\r\n            >\r\n                <div className=\"Sim-left\">\r\n                    <SimReport/>\r\n                </div>\r\n                \r\n                <div className=\"Simulation-middle\">\r\n                    <SimulationForm fields={[{name: \"nothing\"}]}/>\r\n                </div>\r\n\r\n                <div className=\"Simulation-right\">\r\n                    <SimulationHelper/>\r\n                </div>\r\n            </SplitPane>\r\n        </div>\r\n    );\r\n}\r\n\r\n","// ********************** ACTIONS FOR EDUCATON ********************** //\r\nexport type MainActions =\r\n  | { type: \"TOGGLE_SETTINGS\"; payload: boolean }\r\n  | { type: \"TOGGLE_WELCOME\"; payload: boolean };\r\n\r\nexport const toggleSettingsVisibility = (_payload: boolean): MainActions => ({\r\n  type: \"TOGGLE_SETTINGS\",\r\n  payload: _payload,\r\n});\r\n\r\nexport const toggleWelcomeVisibility = (_payload: boolean): MainActions => ({\r\n  type: \"TOGGLE_WELCOME\",\r\n  payload: _payload,\r\n});\r\n\r\n// ****************************************************************** //\r\n","\r\nimport { useTypedSelector } from \"../reducers\";\r\nimport { toggleSettingsVisibility } from \"../actions/mainActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { Drawer, Upload, Button, message } from \"antd\";\r\nimport { UploadOutlined, ExportOutlined, FireOutlined } from \"@ant-design/icons\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nimport { clear, loadFromLocalStorage } from \"../actions/simulationActions\";\r\n\r\nimport \"../style/Settings.css\";\r\nimport { loadFromLocalStorageEducation, updateCompletedArticles } from \"../actions/educationActions\";\r\n\r\n/**\r\n * Settings element component.\r\n * \r\n * @returns the enitre settings component as a JSX.Element.\r\n */\r\nexport function Settings(): JSX.Element {\r\n    const dispatch = useDispatch();\r\n\r\n    // Visibility of settings menu\r\n    const settingsVisibility = useTypedSelector((state) => state.main.settings_open);\r\n\r\n    /**\r\n     * Closes the settings menu.\r\n     * \r\n     */\r\n    function onClose(){\r\n      dispatch(toggleSettingsVisibility(false))\r\n    }\r\n\r\n    /**\r\n     * Export all the content of the local storage to \"settings.data\"\r\n     * coded as plain text in \"utf-8\" \r\n     * \r\n     */\r\n    function exportLocalStorageToFile() {\r\n        let data: string = JSON.stringify(localStorage)\r\n        data = data.replace(\"undefined\",\"[]\")\r\n        try {\r\n            const blob = new Blob([data], {type: \"text/plain;charset=utf-8\"});\r\n            saveAs(blob, \"settings.data\");\r\n            message.success(\"File successfully exported\");\r\n        } catch(error) {\r\n            message.error(\"File export failed.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function that updates all reducers based on the localstorage content.\r\n     * \r\n     */\r\n    function updateReducers(){\r\n      dispatch(loadFromLocalStorage())\r\n      dispatch(loadFromLocalStorageEducation())\r\n    }\r\n\r\n    const props = {\r\n      name: \"file\",\r\n      action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\r\n      headers: {\r\n        authorization: \"authorization-text\",\r\n      },\r\n\r\n      // Using the right type (UploadChangeParam<UploadFile<Blob>>) breaks the code \r\n      onChange(info: any) {\r\n\r\n        //When the file is uploaded\r\n        if (info.file.status === \"done\") {\r\n          const reader = new FileReader();\r\n          reader.readAsText(info.fileList[0].originFileObj, \"utf-8\");\r\n          reader.onload = function (evt) {\r\n              try {\r\n                const str = evt.target?.result?.toString() ?? \"\"\r\n                const data = JSON.parse(str);\r\n                Object.keys(data).forEach(function (k) {\r\n                    localStorage.setItem(k, data[k]);\r\n                });\r\n                updateReducers()\r\n                message.success(`${info.file.name} imported successfully`);\r\n              } catch(error){\r\n                message.error(`${info.file.name} file upload failed: ${error}`);\r\n              }\r\n          }\r\n          reader.onerror = function () {\r\n            message.error(`${info.file.name} file upload failed.`);\r\n          }\r\n        } else if (info.file.status === \"error\") {\r\n          message.error(`${info.file.name} file upload failed.`);\r\n        }\r\n      },\r\n      progress: {\r\n        strokeColor: {\r\n          \"0%\": \"#108ee9\",\r\n          \"100%\": \"#87d068\",\r\n        },\r\n        strokeWidth: 3,\r\n        format: (percent: number | undefined) => { \r\n          if (typeof percent !== \"undefined\") \r\n          return `${ parseFloat(percent.toFixed(2))}%`},\r\n      },\r\n    };\r\n\r\n    function resetSimulation(){\r\n      dispatch(clear());\r\n      message.success(\"Simulation was successfully reset\");\r\n    }\r\n\r\n    function resetEducation(){\r\n      const tempArray = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\r\n      dispatch(updateCompletedArticles(tempArray))\r\n      message.success(\"Education was successfully reset\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Drawer\r\n            title=\"Settings\"\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={onClose}\r\n            visible={settingsVisibility}\r\n            width=\"35%\"\r\n        >\r\n        <p className=\"Description-long\">\r\n          All the progress is stored in the browser's local\r\n          storage and will remain there until your browser cash is cleared. \r\n          To prevent the loss of progress, you may export the data and import \r\n          it either on this or any other computer. In addition, you can reset all the progress.\r\n        </p>\r\n        <h4 className=\"Description-short\">You may export or import the data below</h4>\r\n        <div className=\"Container-buttons\">\r\n            <Button id=\"export\" onClick={exportLocalStorageToFile} icon={<ExportOutlined /> }>Export</Button>\r\n            <Upload id=\"import\" {...props} maxCount={1}>\r\n                <Button icon={<UploadOutlined />}>Import</Button>\r\n            </Upload>   \r\n        </div>\r\n        <p className=\"Description-long\">\r\n        </p>\r\n        <h4 className=\"Description-short\">You may reset your progress below</h4>\r\n        <div className=\"Container-reset\">\r\n            <Button id=\"resetEducation\" onClick={resetEducation} icon={<FireOutlined />}>Reset Education</Button>\r\n            <Button id=\"resetSimulation\" onClick={resetSimulation} icon={<FireOutlined />}>Reset Simulation</Button>\r\n        </div>\r\n        </Drawer>\r\n        </>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/knowledge.4a3876db.svg\";","export default __webpack_public_path__ + \"static/media/labs-text-color.891dc41b.svg\";","\r\nimport { useTypedSelector } from \"../reducers\";\r\nimport { toggleWelcomeVisibility } from \"../actions/mainActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { Button, Modal } from \"antd\";\r\n\r\nimport Logo from \"../assets/icons/knowledge.svg\";\r\nimport Labs from \"../assets/icons/labs-text-color.svg\";\r\n\r\n\r\n\r\n\r\nimport \"../style/Welcome.css\";\r\n\r\n/**\r\n * Welcome page element component.\r\n * \r\n * @returns the enitre welcome page component as a JSX.Element.\r\n */\r\nexport function Welcome(): JSX.Element {\r\n    const dispatch = useDispatch()\r\n\r\n     // Visibility of welcome page\r\n    const welcomeVisibility = useTypedSelector((state) => state.main.welcome_page_open);\r\n\r\n    function handleOk(){\r\n        dispatch(toggleWelcomeVisibility(false))\r\n    }\r\n\r\n    return (\r\n        <>\r\n         <Modal\r\n         \r\n            title=\"Welcome to Financial Literatus\" \r\n            centered={true}\r\n            visible={welcomeVisibility} \r\n            width={1200}\r\n            okButtonProps={{ ghost: true }}\r\n            onCancel={handleOk}\r\n            footer={[\r\n                <Button key=\"continue\" type=\"primary\" onClick={handleOk}>\r\n                  Continue\r\n                </Button>\r\n              ]}\r\n        >\r\n            <div className=\"Container-modal\">\r\n                <img\r\n                    className=\"Logo-welcome\"\r\n                    src={Logo}\r\n                    alt=\"Logo\"\r\n                ></img>\r\n                <div className=\"Description-welcome\">\r\n                    <div className=\"Descripntion-welcome-container-q\">\r\n                        <ul className=\"Description-welcome-q\" >\r\n                            <h3>Do you have problems with budget planning?</h3>\r\n                        </ul>\r\n                        <ul className=\"Description-welcome-q\" >\r\n                            <h3>Do you need help with finding your personal career path?</h3>\r\n                        </ul>\r\n                        <ul className=\"Description-welcome-q\" >\r\n                            <h3>Do you want to become financially literate?</h3>\r\n                        </ul>\r\n                    </div>\r\n                    <h2 className=\"Description-welcome-place\">\r\n                            You are at the right place!\r\n                        </h2>\r\n                    <p className=\"Description-welcome-text\">\r\n                        The goal of this website is to increase your financial literacy, \r\n                        to provide you a solution for budget planning,\r\n                        and to help you with finding the lifestyle that fits your needs.\r\n                    </p>\r\n                </div>\r\n                <div className=\"Developers-mentor-repository\">\r\n                    <h3>Developers</h3>\r\n                    <ul>\r\n                        <li>Aleksandr Molchagin</li>\r\n                        <li>Zwea Htet</li>\r\n                    </ul>\r\n                    <h3>Mentor</h3>\r\n                    <ul>\r\n                        <li>Joe Wandyez</li>\r\n                    </ul>\r\n                    <h3>Project Repository</h3>\r\n                    <a type=\"link\" target=\"_blank\" href=\"https://github.com/financial-literatus/financial-literatus.github.io\" >https://github.com/financial-literatus/</a>\r\n                    <a target=\"_blank\" href=\"https://labs.codeday.org\">\r\n                        <img\r\n                            className=\"Labs-welcome\"\r\n                            src={Labs}\r\n                            alt=\"Logo\"\r\n                        >\r\n                        </img>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n         </Modal>\r\n        </>\r\n    );\r\n}\r\n","import { Menu } from \"antd\";\r\nimport { SettingOutlined } from \"@ant-design/icons\";\r\nimport React from \"react\";\r\nimport Logo from \"./assets/icons/manual-edited.svg\";\r\n\r\nimport \"./style/App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport { Education } from \"./pages/Education\";\r\nimport { Showcase } from \"./pages/Showcase\";\r\nimport Simulation from \"./pages/Simulation\";\r\nimport { Settings } from \"./pages/Settings\";\r\nimport { Welcome } from \"./pages/Welcome\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { toggleSettingsVisibility, toggleWelcomeVisibility } from \"./actions/mainActions\";\r\n\r\n\r\nfunction App(): JSX.Element {\r\n  const dispatch = useDispatch();\r\n\r\n  const onSettingsOpen = () => {\r\n    dispatch(toggleSettingsVisibility(true))\r\n  };\r\n\r\n  function showWelcomePage(){\r\n    dispatch(toggleWelcomeVisibility(true))\r\n  }\r\n  \r\n  return (\r\n    <Router>\r\n      <div className=\"Header-main\">\r\n        <div className=\"Logo\" onClick={showWelcomePage}>\r\n          <img\r\n            className=\"Logo-element\"\r\n            id=\"Logo-image\"\r\n            src={Logo}\r\n            alt=\"Logo\"\r\n          ></img>\r\n          <h3 className=\"Logo-element\" id=\"Logo-text\">\r\n            Financial Literatus\r\n          </h3>\r\n        </div>\r\n        <Menu\r\n          className=\"App-header\"\r\n          defaultSelectedKeys={[\"1\"]}\r\n          mode=\"horizontal\"\r\n          theme=\"light\"\r\n        >\r\n          <Menu.Item className=\"Empty-element\" id=\"empty-element\">\r\n          </Menu.Item>\r\n          <Menu.Item key=\"1\" className=\"App-header-child\">\r\n            <Link to=\"/education\">Education</Link>\r\n          </Menu.Item>\r\n          <Menu.Item className=\"App-header-child\">\r\n            <Link to=\"/showcase\">Showcase</Link>\r\n          </Menu.Item>\r\n          <Menu.Item className=\"App-header-child\">\r\n            <Link to=\"/simulation\">Simulation</Link>\r\n          </Menu.Item>\r\n          <Menu.Item className=\"App-header-child\" id=\"settings\" onClick={onSettingsOpen} >\r\n            <SettingOutlined/>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </div>\r\n      <div className=\"Body\">\r\n        <Route path=\"/\" />\r\n        <Redirect to=\"/education\"></Redirect>\r\n        <Route path=\"/education\" exact component={Education} />\r\n        <Route path=\"/showcase\" component={Showcase} />\r\n        <Route path=\"/simulation\" component={Simulation} />\r\n      </div>\r\n      <Settings></Settings>\r\n      <Welcome></Welcome>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && \r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}